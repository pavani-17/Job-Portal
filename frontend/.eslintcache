[{"/home/pavani/Desktop/DASS/Job_Portal/frontend/src/App.js":"1","/home/pavani/Desktop/DASS/Job_Portal/frontend/src/index.js":"2","/home/pavani/Desktop/DASS/Job_Portal/frontend/src/reportWebVitals.js":"3","/home/pavani/Desktop/DASS/Job_Portal/frontend/src/components/MainComponent.js":"4","/home/pavani/Desktop/DASS/Job_Portal/frontend/src/components/RegisterComponent.js":"5","/home/pavani/Desktop/DASS/Job_Portal/frontend/src/components/LoginComponent.js":"6","/home/pavani/Desktop/DASS/Job_Portal/frontend/src/components/CreateJob.js":"7","/home/pavani/Desktop/DASS/Job_Portal/frontend/src/components/UserDashboard.js":"8","/home/pavani/Desktop/DASS/Job_Portal/frontend/src/components/UserApplications.js":"9","/home/pavani/Desktop/DASS/Job_Portal/frontend/src/components/UserProfile.js":"10","/home/pavani/Desktop/DASS/Job_Portal/frontend/src/components/RecruiterProfile.js":"11","/home/pavani/Desktop/DASS/Job_Portal/frontend/src/components/RecruiterDashboard.js":"12","/home/pavani/Desktop/DASS/Job_Portal/frontend/src/components/viewApplicants.js":"13","/home/pavani/Desktop/DASS/Job_Portal/frontend/src/components/viewEmployees.js":"14","/home/pavani/Desktop/DASS/Job_Portal/frontend/src/components/PrivateRoute.js":"15","/home/pavani/Desktop/DASS/Job_Portal/frontend/src/components/LogOutComponent.js":"16","/home/pavani/Desktop/DASS/Job_Portal/frontend/src/components/NavbarUser.js":"17","/home/pavani/Desktop/DASS/Job_Portal/frontend/src/components/NavbarRecruiter.js":"18","/home/pavani/Desktop/DASS/Job_Portal/frontend/src/components/LoggedOutNav.js":"19","/home/pavani/Desktop/DASS/Job_Portal/frontend/src/components/HomeComponent.js":"20"},{"size":203,"mtime":1611351766208,"results":"21","hashOfConfig":"22"},{"size":548,"mtime":1610733091790,"results":"23","hashOfConfig":"22"},{"size":362,"mtime":1610704286868,"results":"24","hashOfConfig":"22"},{"size":5748,"mtime":1611625534904,"results":"25","hashOfConfig":"22"},{"size":23440,"mtime":1611614848929,"results":"26","hashOfConfig":"22"},{"size":4075,"mtime":1611618184354,"results":"27","hashOfConfig":"22"},{"size":14897,"mtime":1611596546427,"results":"28","hashOfConfig":"22"},{"size":13106,"mtime":1611596646119,"results":"29","hashOfConfig":"22"},{"size":6220,"mtime":1611623188815,"results":"30","hashOfConfig":"22"},{"size":23390,"mtime":1611616859494,"results":"31","hashOfConfig":"22"},{"size":9522,"mtime":1611597472114,"results":"32","hashOfConfig":"22"},{"size":8001,"mtime":1611596587431,"results":"33","hashOfConfig":"22"},{"size":7185,"mtime":1611620947805,"results":"34","hashOfConfig":"22"},{"size":8062,"mtime":1611596690807,"results":"35","hashOfConfig":"22"},{"size":1029,"mtime":1611339390600,"results":"36","hashOfConfig":"22"},{"size":1132,"mtime":1611581152284,"results":"37","hashOfConfig":"22"},{"size":1849,"mtime":1611342764419,"results":"38","hashOfConfig":"22"},{"size":2047,"mtime":1611344000032,"results":"39","hashOfConfig":"22"},{"size":1507,"mtime":1611580611441,"results":"40","hashOfConfig":"22"},{"size":1159,"mtime":1611580637261,"results":"41","hashOfConfig":"22"},{"filePath":"42","messages":"43","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"44"},"1uwwgne",{"filePath":"45","messages":"46","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"44"},{"filePath":"47","messages":"48","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"44"},{"filePath":"49","messages":"50","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"51","usedDeprecatedRules":"44"},{"filePath":"52","messages":"53","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"54","usedDeprecatedRules":"44"},{"filePath":"55","messages":"56","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"57","usedDeprecatedRules":"44"},{"filePath":"58","messages":"59","errorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":"60","usedDeprecatedRules":"44"},{"filePath":"61","messages":"62","errorCount":0,"warningCount":10,"fixableErrorCount":0,"fixableWarningCount":0,"source":"63","usedDeprecatedRules":"44"},{"filePath":"64","messages":"65","errorCount":0,"warningCount":10,"fixableErrorCount":0,"fixableWarningCount":0,"source":"66","usedDeprecatedRules":"44"},{"filePath":"67","messages":"68","errorCount":0,"warningCount":16,"fixableErrorCount":0,"fixableWarningCount":0,"source":"69","usedDeprecatedRules":"44"},{"filePath":"70","messages":"71","errorCount":0,"warningCount":15,"fixableErrorCount":0,"fixableWarningCount":0,"source":"72","usedDeprecatedRules":"44"},{"filePath":"73","messages":"74","errorCount":0,"warningCount":9,"fixableErrorCount":0,"fixableWarningCount":0,"source":"75","usedDeprecatedRules":"44"},{"filePath":"76","messages":"77","errorCount":0,"warningCount":17,"fixableErrorCount":0,"fixableWarningCount":0,"source":"78","usedDeprecatedRules":"44"},{"filePath":"79","messages":"80","errorCount":0,"warningCount":11,"fixableErrorCount":0,"fixableWarningCount":0,"source":"81","usedDeprecatedRules":"44"},{"filePath":"82","messages":"83","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"44"},{"filePath":"84","messages":"85","errorCount":0,"warningCount":9,"fixableErrorCount":0,"fixableWarningCount":0,"source":"86","usedDeprecatedRules":"44"},{"filePath":"87","messages":"88","errorCount":0,"warningCount":10,"fixableErrorCount":0,"fixableWarningCount":0,"source":"89","usedDeprecatedRules":"44"},{"filePath":"90","messages":"91","errorCount":0,"warningCount":10,"fixableErrorCount":0,"fixableWarningCount":0,"source":"92","usedDeprecatedRules":"93"},{"filePath":"94","messages":"95","errorCount":0,"warningCount":10,"fixableErrorCount":0,"fixableWarningCount":0,"source":"96","usedDeprecatedRules":"44"},{"filePath":"97","messages":"98","errorCount":0,"warningCount":15,"fixableErrorCount":0,"fixableWarningCount":0,"source":"99","usedDeprecatedRules":"44"},"/home/pavani/Desktop/DASS/Job_Portal/frontend/src/App.js",[],["100","101"],"/home/pavani/Desktop/DASS/Job_Portal/frontend/src/index.js",[],"/home/pavani/Desktop/DASS/Job_Portal/frontend/src/reportWebVitals.js",[],"/home/pavani/Desktop/DASS/Job_Portal/frontend/src/components/MainComponent.js",["102"],"import React, { Component } from 'react';\nimport {Switch, Route, Redirect, withRouter, BrowserRouter} from 'react-router-dom';\nimport Register from './RegisterComponent';\nimport Login from './LoginComponent';\nimport axios from 'axios';\nimport CreateJob from './CreateJob';\nimport UserDashboard from './UserDashboard';\nimport UserApplication from './UserApplications';\nimport UserProfile from './UserProfile';\nimport RecruiterProfile from './RecruiterProfile';\nimport RecruiterDashboard from './RecruiterDashboard';\nimport ViewApplicant from './viewApplicants';\nimport ViewEmployees from './viewEmployees';\nimport PrivateRoute from './PrivateRoute';\nimport Logout from './LogOutComponent';\nimport Home from './HomeComponent';\n\nexport default class Main extends Component {\n    constructor(){\n        super();\n        this.state = {\n            isLoggedIn : false,\n            token: null,\n            user_id: null,\n            type: null\n        };\n        this.attemptLogin = this.attemptLogin.bind(this);\n        this.attemptLogout = this.attemptLogout.bind(this);\n    }\n    \n    attemptLogin(token, user_id, type) {\n        localStorage.setItem(\"token\", token);\n        localStorage.setItem(\"user_id\", user_id);\n        localStorage.setItem(\"type\",type);\n        this.setState({\n            isLoggedIn : true,\n            token: token,\n            user_id : user_id,\n            type : type\n        })\n        axios.defaults.headers.common[\"Authorization\"] = \"Bearer \" + token;\n    }   \n\n    attemptLogout()\n    {\n        if(localStorage && localStorage.token && localStorage.user_id && localStorage.type)\n        {\n            localStorage.removeItem(\"token\");\n            localStorage.removeItem(\"user_id\");\n            localStorage.removeItem(\"user_id\");\n        }\n        this.setState({\n            isLoggedIn: false,\n            token: null,\n            type: null,\n            user_id: null\n        });\n    }\n\n    componentWillMount() {\n        console.log(\"This will print\");\n        if(localStorage && localStorage.token)\n        {\n            this.attemptLogin(localStorage.token, localStorage.user_id, localStorage.type);\n        }\n    }\n    componentDidMount() {\n        console.log(this.state);\n    }\n    render()\n    {\n\n        const viewApplicants = ({match}) => {\n            if(this.state.isLoggedIn === false || this.state.type !== \"Recruiter\")\n            {\n                return(\n                    <Redirect to=\"/login\" />\n                )\n            }\n            return(\n                <ViewApplicant job_id={match.params.jobId}/>\n            );\n        }\n\n        return(\n            <div className=\"App\">\n                <BrowserRouter>\n                    <Switch>\n                        <Route path='/home' component={Home} />\n                        <Route path='/register' component={Register} />\n                        <Route path='/login' component={() => <Login attemptLogin={this.attemptLogin} />} />\n                        <Route path='/recruiter/createJob'  \n                            render={\n                                (props) => <PrivateRoute {...props} isLoggedIn={this.state.isLoggedIn} type={this.state.type} desiredType=\"Recruiter\" path=\"/recruiter/createJob\"  hasProps={false} component={CreateJob}/>\n                            }/>\n                        <Route path='/applicant/dashboard' \n                            render={\n                                (props) => <PrivateRoute {...props} isLoggedIn={this.state.isLoggedIn} type={this.state.type} desiredType=\"Applicant\" path=\"/applicant/dashboard\" hasProps={false} component={UserDashboard} />\n                            }/>\n                        <Route path='/applicant/applications' \n                            render={\n                                (props) => <PrivateRoute {...props} isLoggedIn={this.state.isLoggedIn} type={this.state.type} desiredType=\"Applicant\" path=\"/applicant/applications\" hasProps={false} component={UserApplication} />\n                            }/>\n                        <Route path='/applicant/profile' \n                            render={\n                                (props) => <PrivateRoute {...props} isLoggedIn={this.state.isLoggedIn} type={this.state.type} desiredType=\"Applicant\" path=\"/applicant/profile\" hasProps={false} component={UserProfile} />\n                            }/>\n                        <Route path='/recruiter/profile' \n                            render={\n                                (props) => <PrivateRoute {...props} isLoggedIn={this.state.isLoggedIn} type={this.state.type} desiredType=\"Recruiter\" path=\"/recruiter/profile\" hasProps={false} component={RecruiterProfile} />\n                            }/>\n                        <Route path='/recruiter/dashboard' \n                            render={\n                                (props) => <PrivateRoute {...props} isLoggedIn={this.state.isLoggedIn} type={this.state.type} desiredType=\"Recruiter\" path=\"/recruiter/dashboard\" hasProps={false} component={RecruiterDashboard} />\n                            }/>\n                        <Route path='/recruiter/viewJob/:jobId' component={viewApplicants} />\n                        <Route path='/recruiter/employees'\n                            render={\n                                (props) => <PrivateRoute {...props} isLoggedIn={this.state.isLoggedIn} type={this.state.type} desiredType=\"Recruiter\" path=\"/recruiter/employees\" hasProps={false} component={ViewEmployees} />\n                            }/>\n                        <Route path='/logout' component={() => <Logout type={this.state.type} attemptLogout={this.attemptLogout}/>} />\n                    </Switch>\n                </BrowserRouter>\n            </div>\n        );\n    }\n\n}\n","/home/pavani/Desktop/DASS/Job_Portal/frontend/src/components/RegisterComponent.js",["103","104","105"],"import React, {Component} from 'react';\nimport { Breadcrumb, BreadcrumbItem, Button, Form, FormGroup, Label, Input, Col, FormFeedback,Row } from 'reactstrap';\nimport axios from 'axios';\nimport NavbarDefault from './LoggedOutNav';\n\nexport default class Register extends Component\n{\n    constructor()\n    {\n        super();\n        this.state = {\n            firstname: '',\n            lastname: '',\n            type: 'Select Type',\n            email:'',\n            password: '',\n            phone: '',\n            bio: '',\n            ex_skill: '',\n            education: [{education_name:'', education_start:'', education_end:''}],\n            num_ed: 1,\n            skills: ['Select a skill'],\n            num_skill:1,\n            skills_initial : ['C', 'C++', 'Javascript', 'Python'],\n            touched: {\n                firstname : false,\n                lastname: false,\n                email: false,\n                password: false,\n                select: false,\n                education: [{education_name: false, education_start: false, education_end: false}],\n                skills: [false],\n                bio: false,\n                phone: false\n            }        }\n        this.handleChange = this.handleChange.bind(this);\n        this.newPostForm = this.newPostForm.bind(this);\n        this.handleEdChange = this.handleEdChange.bind(this);\n        this.incrementEducation = this.incrementEducation.bind(this);\n        this.decrementEducation = this.decrementEducation.bind(this);\n        this.handleSkillChange = this.handleSkillChange.bind(this);\n        this.incrementSkill = this.incrementSkill.bind(this);\n        this.decrementSkill = this.decrementSkill.bind(this);\n        this.handleSubmit = this.handleSubmit.bind(this);\n        this.validate = this.validate.bind(this);\n        this.validateApplicant = this.validateApplicant.bind(this);\n        this.validateRecruiter = this.validateRecruiter.bind(this);\n        this.validateSubmit = this.validateSubmit.bind(this);\n        this.extraSkill = this.extraSkill.bind(this);\n    }\n\n    extraSkill()\n    {\n        var val = this.state.skills_initial;\n        val.push(this.state.ex_skill);\n        this.setState({\n            skills_initial: val,\n            ex_skill: ''\n        })\n    }\n\n    validateSubmit()\n    {\n        var firstname = this.state.firstname;\n        if(firstname.length === 0)\n        {\n            alert(\"First name is required. Correct before submission\");\n            return false;\n        }\n\n        var lastname = this.state.lastname;\n        if(lastname.length === 0)\n        {\n            alert(\"Last name is required. Correct before submission\");\n            return false;\n        }\n\n        var email = this.state.email;\n        if(email.length === 0)\n        {\n            alert(\"email is required. Correct before submission\");\n            return false;\n        }\n        const reg = /^[a-zA-Z0-9.!#$%&'+/=?^_`{|}~-]+@[a-zA-Z0-9-]+(?:.[a-zA-Z0-9-]+.+(?:.[a-zA-Z0-9-]))$/\n        if(!reg.test(email))\n        {\n            alert(\"Make sure email format is correct\");\n            return false;\n        }\n\n        var password = this.state.password;\n        if(password.length === 0)\n        {\n            alert(\"Password is required. Correct before submission\");\n            return false;\n        }\n\n        var select = this.state.type;\n        if(select === 'Select Type')\n        {\n            alert(\"Select the type of user\");\n            return false;\n        }\n\n        if(select === \"Applicant\")\n        {\n            var i,n = this.state.num_ed;\n            for(i=0;i<n;i++)\n            {\n                if(this.state['education'][i]['education_name'].length === 0)\n                {\n                    alert(\"Make sure all education fields have School/College\");\n                    return false;\n                }\n\n                if(this.state['education'][i]['education_start'] <= 0 && this.state['education'][i]['education_start'] !== '')\n                {\n                    alert(\"All education start years must be positive\");\n                    return false;\n                }\n                \n                if(this.state['education'][i]['education_start'] === '')\n                {\n                    alert(\"All education start years are required fields\");\n                    return false;\n                }\n\n                if(this.state['education'][i]['education_end'] <= 0 && this.state['education'][i]['education_end'] !== '')\n                {\n                    alert(\"All education end years must be positive\");\n                    return false;\n                }\n            }\n            n = this.state.num_skill;\n            for(i=0;i<n;i++)\n            {\n                if(this.state['skills'][i] === 'Select a skill')\n                {\n                    alert(\"Please remove unnecessary skill fields\");\n                    return false;\n                }\n            }\n        }\n        else if(select === \"Recruiter\")\n        {\n            const reg = /^\\d{10}$/;\n            if(this.state.touched.phone && !reg.test(this.state.phone) && this.state.phone !== '')\n            {\n                alert(\"Please use a valid phone number. Also note that it is not a required field\");\n                return false;\n            }\n            var bio = this.state.bio;\n            if( bio.split(' ').length > 250)\n            {\n                alert(\"Bio must have less than 250 words\");\n                return false;\n            }\n        }\n        return true;\n    }\n\n    validate(firstname, lastname, email, password, select)\n    {\n        var errors = {\n            firstname : '',\n            lastname : '',\n            password : '',\n            email : '',\n            select:'',\n        };\n\n        if(this.state.touched.firstname && firstname.length === 0)\n        {\n            errors.firstname = 'First Name is required';\n        }\n\n        if(this.state.touched.lastname && lastname.length === 0)\n        {\n            errors.lastname = 'Last Name is required';\n        }\n\n        if(this.state.touched.email && email.length === 0)\n        {\n            errors.email = 'Email is required';\n        }\n        const reg = /^[a-zA-Z0-9.!#$%&'+/=?^_`{|}~-]+@[a-zA-Z0-9-]+(?:.[a-zA-Z0-9-]+.+(?:.[a-zA-Z0-9-]))$/\n        if(this.state.touched.email && !reg.test(email) && email.length !== 0)\n        {\n            errors.email = 'Email is in wrong format'\n        }\n\n        if(this.state.touched.password && password.length === 0)\n        {\n            errors.password = 'Password is required';\n        }\n        if(this.state.touched.select && select === 'Select Type')\n        {\n            errors.select = 'Please select the type of user';\n        }\n        return errors;\n    }\n\n    validateApplicant()\n    {\n        var errors = {\n            education: [],\n            skills : []\n        }\n\n        if(this.state.type === \"Applicant\")\n        {\n            var i,n = this.state.num_ed;\n            for(i=0;i<n;i++)\n            {\n                errors.education.push({education_name:'', education_start: '', education_end:''});\n                if(this.state.touched['education'][i]['education_name'] && this.state['education'][i]['education_name'].length === 0)\n                {\n                    errors.education[i]['education_name'] = 'School/College is required';\n                }\n\n                if(this.state.touched['education'][i]['education_start'] && this.state['education'][i]['education_start'] <= 0 && this.state['education'][i]['education_start'] !== '')\n                {\n                    errors.education[i]['education_start'] = 'Education Start Year must be positive';\n                }\n                \n                if(this.state.touched['education'][i]['education_start'] && this.state['education'][i]['education_start'] === '')\n                {\n                    errors.education[i]['education_start'] = 'Education Start Year is required';\n                }\n\n                if(this.state.touched['education'][i]['education_end'] && this.state['education'][i]['education_end'] <= 0 && this.state['education'][i]['education_end'] !== '')\n                {\n                    errors.education[i]['education_end'] = 'Education End Year must be positive';\n                }\n            }\n\n            n = this.state.num_skill;\n            for(i=0;i<n;i++)\n            {\n                errors.skills.push('');\n                console.log(this.state.touched['skills'][i]);\n                if(this.state.touched['skills'][i] && this.state['skills'][i] === 'Select a skill')\n                {\n                    errors['skills'][i] = \"Skill is compulsory. Please remove the skill if not required\"\n                }\n            }\n        }\n        return errors;\n    }\n\n    validateRecruiter()\n    {\n        var errors= {\n            bio: '',\n            phone: '',\n        };\n\n        if(this.state.type === \"Recruiter\")\n        {\n            const reg = /^\\d{10}$/;\n            if(this.state.touched.phone && !reg.test(this.state.phone) && this.state.phone !== '')\n            {\n                errors.phone = \"Phone number is in the wrong format\"\n            }\n            var bio = this.state.bio;\n            if(this.state.touched.bio && bio.split(' ').length > 250)\n            {\n                errors.bio = \"Bio must have less than 250 words\";\n            }\n        }\n        return errors;\n    }\n\n    handleSubmit(event)\n    {\n        event.preventDefault();\n        if(this.state.type === \"Select Type\")\n        {\n            alert(\"Select a type of user before proceeding\");\n            return;\n        }\n        if(this.validateSubmit() === false)\n        {\n            return;\n        }\n        if(this.state.type===\"Applicant\")\n        {\n            axios({\n                method: \"POST\",\n                url: \"http://localhost:3000/signup/applicant\",\n                data: this.state,\n                headers: {\n                    'Content-Type' : 'application/json',\n                }\n            }).then((response) => {\n                console.log(response);\n                alert(\"Your registration is successful\");\n                window.location.replace(\"/login\");\n            }).catch((error) => {\n                alert(JSON.stringify(error.response));\n            })\n        }\n        else if(this.state.type===\"Recruiter\")\n        {\n            axios({\n                method: \"POST\",\n                url: \"http://localhost:3000/signup/recruiter\",\n                data: this.state,\n                headers: {\n                    'Content-Type' : 'application/json',\n                }\n            }).then((response) => {\n                console.log(response);\n                alert(\"Your registration is successful\");\n                window.location.replace(\"/login\");\n            }).catch((error) => {\n                alert(JSON.stringify(error.response));\n            })\n        }\n        \n    }\n\n    handleBlur = (field) => (evt) => {\n        this.setState({\n            touched : { ...this.state.touched, [field]: true}\n        }, console.log(this.state.touched));\n    }\n\n    handleBlurEd = (i, field) => (evt) => {\n        var temp = this.state.touched;\n        temp['education'][i][field] = true;\n        this.setState({\n            touched: temp\n        })\n        console.log(temp);\n    }\n\n    handleBlurSkill = (i) => (evt) => {\n        var temp = this.state.touched;\n        temp['skills'][i] = true;\n        this.setState({\n            touched: temp\n        })\n        console.log(temp);\n    }\n\n    handleChange(event)\n    {\n        const target = event.target;\n        const value = target.value;\n        const name = target.name;\n        this.setState({\n            [name] : value\n        });\n    };\n\n    handleEdChange(event) {\n        const target = event.target;\n        const value = target.value;\n        var name = target.name;\n        var i = name[0];\n        var temp = this.state.education;\n        name = name.slice(1);\n        temp[i][name] = value;\n        console.log(temp);\n        this.setState({\n            education: temp\n        })\n    }\n\n    handleSkillChange(event) {\n        const target = event.target;\n        const value = target.value;\n        var name = target.name;\n        var temp = this.state.skills;\n        temp[name] = value;\n        this.setState({\n            skills: temp\n        })\n    }\n    \n    incrementEducation(event)\n    {\n        var t_num = this.state.num_ed+1;\n        var temp = this.state.education;\n        var temp1 = this.state.touched;\n\n        temp.push({education_name:'', education_start:'', education_end:''});\n        temp1['education'].push({education_name: false, education_start: false, education_end: false});\n        this.setState({\n            education: temp,\n            num_ed: t_num,\n            touched: temp1\n        });\n    }\n\n    incrementSkill(event)\n    {\n        var t_num = this.state.num_skill+1;\n        var temp = this.state.skills;\n        var temp1 = this.state.touched;\n        temp1['skills'].push(false);\n        temp.push('Select a skill');\n        console.log(temp1);\n        this.setState({\n            skills: temp,\n            num_skill: t_num,\n            touched: temp1\n        });\n    }\n    \n    decrementEducation(event)\n    {\n        if(this.state.num_ed === 0)\n        {\n            return;\n        }\n        var t_num = this.state.num_ed-1;\n        var temp = this.state.education;\n        var temp1 = this.state.touched;\n        temp1.education.pop();\n        temp.pop();\n        this.setState({\n            education: temp,\n            num_ed: t_num,\n            touched: temp1\n        })\n    }\n    decrementSkill(event)\n    {\n        if(this.state.num_skill === 0)\n        {\n            return;\n        }\n        var t_num = this.state.num_skill - 1;\n        var temp = this.state.skills;\n        temp.pop();\n        var temp1 = this.state.touched;\n        temp1['skills'].pop();\n        this.setState({\n            skills: temp,\n            num_skill: t_num,\n            touched: temp1\n        });\n    }\n\n    newPostForm = (val) => {\n        if(val === \"Applicant\")\n        {\n            var errors = this.validateApplicant();\n            const skills = this.state.skills_initial;\n            let skills_list = skills.length > 0 && skills.map((item, i) => {\n                return(\n                    <option key={i} value={item}>{item}</option>\n                )\n            }, this);\n            skills_list.push(<option selected disabled>Select a skill</option>)\n            let ed_list = [];\n            let i;\n            for (i=0;i<this.state.num_ed;i++)\n            {\n                let name_temp = i +\"education_name\";\n                let start_temp = i +\"education_start\";\n                let end_temp = i +\"education_end\";\n                ed_list.push(\n                        <FormGroup row>\n                            <Label htmlFor=\"education\" md={2}></Label>\n                            <Col md={10}>\n                                <Input type=\"text\" id={name_temp} name={name_temp} placeholder=\"School/College\" value={this.state.education[i].education_name} onChange={this.handleEdChange} onBlur={this.handleBlurEd(i, \"education_name\")} valid={errors.education[i]['education_name'] === ''} invalid={errors.education[i]['education_name'] !== ''}/>\n                                <FormFeedback>{errors.education[i]['education_name']}</FormFeedback>\n                                <Input type=\"number\" id={start_temp} name={start_temp} value={this.state.education[i].education_start} onChange={this.handleEdChange} onBlur={this.handleBlurEd(i, \"education_start\")} valid={errors.education[i]['education_start'] === ''} invalid={errors.education[i]['education_start'] !== ''}/>\n                                <FormFeedback>{errors.education[i]['education_start']}</FormFeedback>\n                                <Input type=\"number\" id={end_temp} name={end_temp} value={this.state.education[i].education_end} onChange={this.handleEdChange}  onBlur={this.handleBlurEd(i, \"education_end\")} valid={errors.education[i]['education_end'] === ''} invalid={errors.education[i]['education_end'] !== ''}/>\n                                <FormFeedback>{errors.education[i]['education_end']}</FormFeedback>\n                            </Col>\n                        </FormGroup>\n                        );\n            }\n            let ski_list =[];\n            for(i=0;i<this.state.num_skill;i++)\n            {\n                ski_list.push(\n                    <FormGroup row>\n                        <Label htmlFor=\"skills\" md={2}></Label>\n                        <Col md={3}>\n                            <Input type=\"select\" id={i} name={i} value={this.state.skills[i]} onChange={this.handleSkillChange} onBlur={this.handleBlurSkill(i)} valid={errors.skills[i] === ''} invalid={errors.skills[i] !== ''}>{skills_list}</Input>\n                            <FormFeedback>{errors.skills[i]}</FormFeedback>\n                        </Col>\n                    </FormGroup>\n                );\n            }\n            let val = (\n                <div>\n                    <FormGroup row>\n                        <Label htmlFor=\"education\" md={2}>Education</Label>\n                    </FormGroup>\n                    {ed_list}\n                </div>\n            );\n            var button1 = <Button Col md={{size:3, offset:3}} onClick={this.incrementEducation}>Add one more education</Button>\n            var button2 = <Button Col md={{size:3, offset:3}} onClick={this.decrementEducation}>Remove one education</Button>\n            var button3 = <Button Col md={{size:3, offset:3}} onClick={this.incrementSkill}>Add one more skill field</Button>\n            var button4 = <Button Col md={{size:3, offset:3}} onClick={this.decrementSkill}>Remove one skill field</Button>\n            return(\n                <div className=\"applicant_form\">\n                   {val}\n                   <FormGroup row>\n                       {button1} {button2}\n                   </FormGroup>\n                   <Label htmlFor=\"skills\" md={2}>Skills</Label>\n\n                    {ski_list}\n                    <FormGroup row>\n                       {button3} {button4}\n                   </FormGroup>\n                   <FormGroup row>\n                       <Input type=\"text\" name=\"ex_skill\" value={this.state.ex_skill} onChange={this.handleChange} ></Input>\n                       <Button onClick={this.extraSkill}>Add skill to dropdown</Button>\n                   </FormGroup>\n                </div>\n            );\n        }\n        else if(val === \"Recruiter\")\n        {\n            const errors = this.validateRecruiter();\n            return(\n                <div className=\"recruiter_form\">\n                    <FormGroup row>\n                        <Label htmlFor=\"phone\" md={2}>Contact Number</Label>\n                        <Col md={10}>\n                            <Input type=\"tel\" id=\"phone\" name=\"phone\" placeholder=\"Contact Number\" value={this.state.phone} onChange={this.handleChange} onBlur={this.handleBlur('phone')} valid={errors.phone===''} invalid={errors.phone !== ''}/>\n                            <FormFeedback>{errors.phone}</FormFeedback>\n                        </Col>\n                    </FormGroup>\n                    <FormGroup row>\n                        <Label htmlFor=\"bio\" md={2}>Your Bio</Label>\n                        <Col md={10}>\n                            <Input type=\"textarea\" id=\"bio\" name=\"bio\" rows=\"6\" onChange={this.handleChange} value={this.state.bio} onBlur={this.handleBlur('bio')} valid={errors.bio===''} invalid={errors.bio !== ''} />\n                            <FormFeedback>{errors.bio}</FormFeedback>\n                        </Col>\n                    </FormGroup>\n                </div>\n            );\n        }\n        else\n        {\n            return null\n        }\n    }\n    \n    render() {\n        let val = this.state.type;\n        let temp_form = this.newPostForm(val);\n        const errors = this.validate(this.state.firstname, this.state.lastname, this.state.email, this.state.password, this.state.type);\n        return(\n            <div className=\"container\">\n                <NavbarDefault/>\n                <h1>Create a New User</h1>\n                <Form>\n                    <FormGroup row>\n                        <Label htmlFor=\"firstname\" md={2}>First Name</Label>\n                        <Col md={10}>\n                            <Input type=\"text\" id=\"firstname\" name=\"firstname\" placeholder=\"First Name\" required onChange={this.handleChange} value={this.state.firstname} onBlur={this.handleBlur('firstname')} valid={errors.firstname === ''} invalid={errors.firstname !== ''} />\n                            <FormFeedback>{errors.firstname}</FormFeedback>\n                        </Col>\n                    </FormGroup>\n                    <FormGroup row>\n                        <Label htmlFor=\"lastname\" md={2}>Last Name</Label>\n                        <Col md={10}>\n                            <Input type=\"text\" id=\"lastname\" name=\"lastname\" placeholder=\"Last Name\" onChange={this.handleChange} value={this.state.lastname} onBlur={this.handleBlur('lastname')} valid={errors.lastname === ''} invalid={errors.lastname !== ''}/>\n                            <FormFeedback>{errors.lastname}</FormFeedback>\n                        </Col>\n                    </FormGroup>\n                    <FormGroup row>\n                        <Label htmlFor=\"email\" md={2}>Email</Label>\n                        <Col md={10}>\n                            <Input type=\"email\" id=\"email\" name=\"email\" placeholder=\"someone@example.com\" onChange={this.handleChange} value={this.state.email}  onBlur={this.handleBlur('email')} valid={errors.email === ''} invalid={errors.email !== ''}/>\n                            <FormFeedback>{errors.email}</FormFeedback>\n                        </Col>\n                    </FormGroup>\n                    <FormGroup row>\n                        <Label htmlFor=\"password\" md={2}>Password</Label>\n                        <Col md={10}>\n                            <Input type=\"password\" id=\"password\" name=\"password\" onChange={this.handleChange} onBlur={this.handleBlur('password')} valid={errors.password === ''} invalid={errors.password !== ''}/>\n                            <FormFeedback>{errors.password}</FormFeedback>\n                        </Col>\n                    </FormGroup>\n                    <FormGroup row>\n                        <Label htmlFor=\"type\" md={2}>Type of User</Label>\n                        <Col md={3}>\n                            <Input type=\"select\" name=\"type\" value={this.state.type} onChange={this.handleChange} onBlur={this.handleBlur('select')} valid={errors.select === ''} invalid={errors.select !== ''}>\n                                <option selected disabled> Select Type</option> \n                                <option>Applicant</option>\n                                <option>Recruiter</option>\n                            </Input>\n                            <FormFeedback> {errors.select}</FormFeedback>\n                        </Col>\n                    </FormGroup>\n                    {temp_form}\n                    <FormGroup row>\n                        <Col md={{size:3, offset:3}}>\n                        <   Button  onClick={this.handleSubmit}>Submit</Button>\n                        </Col>\n                    </FormGroup>\n                </Form>\n            </div>\n        );\n    }\n}","/home/pavani/Desktop/DASS/Job_Portal/frontend/src/components/LoginComponent.js",["106","107","108","109"],"import React, {Component} from 'react';\nimport { Breadcrumb, BreadcrumbItem, Button, Form, FormGroup, Label, Input, Col, FormFeedback,Row } from 'reactstrap';\nimport axios from 'axios';\nimport NavbarDefault from './LoggedOutNav';\nexport default class Login extends Component\n{\n    constructor(props)\n    {\n        super(props);\n        this.state ={\n            email: '',\n            password: '',\n            type: 'Select Type'\n        }\n        this.handleChange = this.handleChange.bind(this);\n        this.handleSubmit = this.handleSubmit.bind(this);\n    }\n\n    handleSubmit(event)\n    {\n        event.preventDefault();\n        if(this.state.type===\"Applicant\")\n        {\n            axios({\n                method: \"POST\",\n                url: \"http://localhost:3000/login/applicant\",\n                data: this.state,\n                headers: {\n                    'Content-Type' : 'application/json',\n                }\n            }).then((response) => {\n                if(response.data.success === true)\n                {\n                    this.props.attemptLogin(response.data.token, response.data.user_id, this.state.type);\n                    alert(\"Login successful\");\n                    window.location.replace(\"/applicant/dashboard\");\n                }\n            }).catch((error) => {\n                alert(JSON.stringify(error.response));\n            })\n        }\n        else if(this.state.type===\"Recruiter\")\n        {\n            axios({\n                method: \"POST\",\n                url: \"http://localhost:3000/login/recruiter\",\n                data: this.state,\n                headers: {\n                    'Content-Type' : 'application/json',\n                }\n            }).then((response) => {\n                if(response.data.success === true)\n                {\n                    this.props.attemptLogin(response.data.token, response.data.user_id, this.state.type);\n                    alert(\"Login successful\");\n                    window.location.replace(\"/recruiter/dashboard\");\n                }\n            }).catch((error) => {\n                alert(JSON.stringify(error));\n            })\n        }\n        \n    }\n\n    handleChange(event)\n    {\n        const target = event.target;\n        const value = target.value;\n        const name = target.name;\n        this.setState({\n            [name] : value\n        });\n    };\n\n    render()\n    {\n        return(\n            <div className=\"container\">\n                <NavbarDefault/>\n                <Form>\n                    <FormGroup row>\n                        <Label htmlFor=\"type\" md={2}>Type of User</Label>\n                        <Col md={3}>\n                            <Input type=\"select\" name=\"type\" value={this.state.type} onChange={this.handleChange}>\n                                <option selected disabled> Select Type</option> \n                                <option>Applicant</option>\n                                <option>Recruiter</option>\n                            </Input>\n                        </Col>\n                    </FormGroup>\n                    <FormGroup row>\n                        <Label htmlFor=\"email\" md={2}>Email</Label>\n                        <Col md={10}>\n                            <Input type=\"email\" id=\"email\" name=\"email\" value={this.state.email} placeholder=\"someone@example.com\" onChange={this.handleChange}/>\n                        </Col>\n                    </FormGroup>\n                    <FormGroup row>\n                        <Label htmlFor=\"password\" md={2}>Password</Label>\n                        <Col md={10}>\n                            <Input type=\"password\" id=\"password\" name=\"password\" value={this.state.password} onChange={this.handleChange}/>\n                        </Col>\n                    </FormGroup>\n                    <FormGroup row>\n                        <Col md={{size:3, offset:3}}>\n                        <   Button  onClick={this.handleSubmit}>Submit</Button>\n                        </Col>\n                    </FormGroup>\n                </Form>\n            </div>\n        )\n    }\n}","/home/pavani/Desktop/DASS/Job_Portal/frontend/src/components/CreateJob.js",["110","111","112","113","114","115","116","117"],"import React, { Component } from 'react';\nimport {Switch, Route, Redirect, withRouter, BrowserRouter} from 'react-router-dom';\nimport { Breadcrumb, BreadcrumbItem, Button, Form, FormGroup, Label, Input, Col, FormFeedback,Row } from 'reactstrap';\nimport axios from 'axios';\nimport NavbarRecruitment from './NavbarRecruiter';\n\nexport default class CreateJob extends Component\n{\n    constructor()\n    {\n        super();\n        this.state = {\n            job_title: '',\n            job_type: 'Select Type',\n            duration: 'Select Duration',\n            salary: '',\n            deadline: '',\n            max_positions: '',\n            max_applications: '',\n            skills: [''],\n            num_skill: 1,\n            touched: {\n                job_title: false,\n                job_type: false,\n                salary: false,\n                duration: false,\n                deadline: false,\n                max_positions: false,\n                max_applications: false,\n                skills: [false]\n            }\n        }\n        this.handleChange = this.handleChange.bind(this);\n        this.handleSkillChange = this.handleSkillChange.bind(this);\n        this.incrementSkill = this.incrementSkill.bind(this);\n        this.decrementSkill = this.decrementSkill.bind(this);\n        this.handleSubmit = this.handleSubmit.bind(this);\n        this.validate = this.validate.bind(this);\n        this.validateSubmit = this.validateSubmit.bind(this);\n    }\n\n    validateSubmit()\n    {\n        if(this.state.job_title.length === 0)\n        {\n            alert(\"Job Title is a required field\");\n            return false;\n        }\n        if(this.state.job_type==='Select Type')\n        {\n            alert(\"Job Type is a required field\");\n            return false;\n        }\n        if(this.state.duration==='Select Duration')\n        {\n            alert(\"Duration is a required field\");\n            return false;\n        }\n        if(this.state.salary <= 0 && this.state.salary !== '')\n        {\n            alert(\"Salary must be positive\")\n            return false;\n        }\n        if(this.state.salary === '')\n        {\n            alert(\"Salary is a required field\");\n            return false;\n        }\n\n        if(this.state.max_positions <= 0 && this.state.max_positions !=='')\n        {\n            alert(\"Maximum positions must be a positive number\");\n            return false;\n        }\n        if(this.state.max_positions==='')\n        {\n            alert(\"Maximum positions is a required field\");\n            return false;\n        }\n        \n        if(this.state.max_applications <= 0 && this.state.max_applications !== '')\n        {\n            alert(\"Maximum applications must be positive\");\n            return false;\n        }\n        if(this.state.max_applications==='')\n        {\n            alert(\"Maximum applications is a required field\");\n            return false;\n        }\n        if(this.state.deadline === '')\n        {\n            alert(\"Deadline is a required field\");\n            return false;\n        }\n        if(new Date(this.state.deadline) - new Date(Date.now()) < 0)\n        {\n            alert(\"Deadline must be after the current date and time\");\n            return false;\n        }\n        var i, n = this.state.num_skill;\n        for(i=0;i<n;i++)\n        {\n            if(this.state.touched.skills[i] && this.state.skills[i] === '')\n            {\n                alert(\"Every skill tab must be filled. Close the ones not required\");\n                return false;\n            }\n        }\n        return true;\n    }\n\n    validate()\n    {\n        var errors = {\n            job_title:'',\n            job_type: '',\n            duration: '',\n            max_positions: '',\n            max_applications: '',\n            salary: '',\n            deadline: '',\n            skills:[]\n        };\n\n        if(this.state.touched.job_title && this.state.job_title.length === 0)\n        {\n            errors.job_title = \"Job Title is a required field\";\n        }\n        if(this.state.job_type==='Select Type' && this.state.touched.job_type)\n        {\n            errors.job_type = \"Job Type is a required field\";\n        }\n        if(this.state.duration==='Select Duration' && this.state.touched.duration)\n        {\n            errors.duration = \"Duration is a required field\";\n        }\n        if(this.state.salary <= 0 && this.state.touched.salary)\n        {\n            errors.salary = \"Salary must be positive\";\n        }\n        if(this.state.salary === '' && this.state.touched.salary)\n        {\n            errors.salary = \"Salary is a required field\";\n        }\n\n        if(this.state.max_positions <= 0 && this.state.touched.max_positions)\n        {\n            errors.max_positions = \"Maximum positions must be a positive number\";\n        }\n        if(this.state.max_positions==='' && this.state.touched.max_positions)\n        {\n            errors.max_positions = \"Maximum positions is a required field\";\n        }\n        \n        if(this.state.max_applications <= 0 && this.state.touched.max_applications)\n        {\n            errors.max_applications = \"Maximum applications must be a positive number\";\n        }\n        if(this.state.max_applications==='' && this.state.touched.max_applications)\n        {\n            errors.max_applications = \"Maximum applications is a required field\";\n        }\n        if(this.state.deadline === '' && this.state.touched.deadline)\n        {\n            errors.deadline = \"Deadline is a required field\"\n        }\n        var i, n = this.state.num_skill;\n        for(i=0;i<n;i++)\n        {\n            errors.skills.push('');\n            if(this.state.touched.skills[i] && this.state.skills[i] === '')\n            {\n                errors.skills[i] = \"Every skill tab must be filled. Close the ones not required\";\n            }\n        }\n        return errors;\n    }\n\n    handleSubmit(event)\n    {\n        event.preventDefault();\n        if(this.validateSubmit() === false)\n            return;\n        console.log(this.state);\n        axios({\n            method: \"POST\",\n            url: \"http://localhost:3000/jobs/\",\n            data: this.state,\n            headers: {\n                'Content-Type' : 'application/json',\n            }\n        }).then((response) => {\n            alert(\"Job Creation successful\");\n            console.log(response);\n            this.setState({\n                job_title: '',\n                job_type: 'Select Type',\n                duration: 'Select Duration',\n                salary: '',\n                deadline: '',\n                max_positions: '',\n                max_applications: '',\n                skills: [''],\n                num_skill: 1,\n                touched: {\n                    job_title: false,\n                    job_type: false,\n                    salary: false,\n                    duration: false,\n                    deadline: false,\n                    max_positions: false,\n                    max_applications: false,\n                    skills: [false]\n                }})\n        }).catch((error) => {\n            alert(JSON.stringify(error.response));\n        })\n    }\n    handleChange(event)\n    {\n        const target = event.target;\n        const value = target.value;\n        const name = target.name;\n        this.setState({\n            [name] : value\n        });\n    };\n\n    handleSkillChange(event) {\n        const target = event.target;\n        const value = target.value;\n        var name = target.name;\n        var temp = this.state.skills;\n        temp[name] = value;\n        this.setState({\n            skills: temp\n        })\n    };\n\n    handleBlur = (field) => (evt) => {\n        this.setState({\n            touched : { ...this.state.touched, [field]: true}\n        }, console.log(this.state.touched));\n    }\n\n    handleBlurSkill = (i) => (evt) => {\n        var temp = this.state.touched;\n        console.log(temp);\n        temp['skills'][i] = true;\n        this.setState({\n            touched: temp\n        })\n        console.log(temp);\n    }\n\n    incrementSkill(event)\n    {\n        var t_num = this.state.num_skill+1;\n        var temp = this.state.skills;\n        var temp1 = this.state.touched;\n        temp1['skills'].push(false);\n        temp.push('');\n        this.setState({\n            skills: temp,\n            num_skill: t_num,\n            touched: temp1\n        });\n    }\n\n    decrementSkill(event)\n    {\n        if(this.state.num_skill === 0)\n        {\n            return;\n        }\n        var t_num = this.state.num_skill - 1;\n        var temp = this.state.skills;\n        var temp1 = this.state.touched;\n        temp1['skills'].pop();\n        temp.pop();\n        this.setState({\n            skills: temp,\n            num_skill: t_num,\n            touched: temp1\n        });\n    }\n\n    render()\n    {\n        const errors = this.validate();\n        var skil_list = [];\n        var button1 = <Button Col md={{size:3, offset:3}} onClick={this.incrementSkill}>Add one more skill field</Button>\n        var button2 = <Button Col md={{size:3, offset:3}} onClick={this.decrementSkill}>Remove one skill field</Button>\n        var i;\n        for(i=0;i<this.state.num_skill;i++)\n        {\n            skil_list.push(\n                <FormGroup row>\n                <Label htmlFor=\"skills\" md={2}></Label>\n                <Col md={10}>\n                    <Input type=\"text\" id={i} name={i} value={this.state.skills[i]} onChange={this.handleSkillChange} onBlur={this.handleBlurSkill(i)} valid={errors.skills[i]=== ''} invalid={errors.skills[i] !== ''}/>\n                    <FormFeedback>{errors.skills[i]}</FormFeedback>\n                </Col>\n            </FormGroup>)\n        }\n        return (\n            <div className=\"container\">\n                <NavbarRecruitment />\n                <Form>\n                    <FormGroup row>\n                        <Label htmlFor=\"job_title\" md={2}>Job Title</Label>\n                        <Col md={10}>\n                            <Input type=\"text\" id=\"job_title\" name=\"job_title\" placeholder=\"Job Title\" value={this.state.job_title} onChange={this.handleChange} onBlur={this.handleBlur('job_title')} valid={errors.job_title === ''} invalid={errors.job_title !== ''}/>\n                            <FormFeedback>{errors.job_title}</FormFeedback>\n                        </Col>\n                    </FormGroup>\n                    <FormGroup row>\n                        <Label htmlFor=\"job_type\" md={2}>Job Type</Label>\n                        <Col md={3}>\n                            <Input type=\"select\" name=\"job_type\" id=\"job_type\" value={this.state.job_type} onChange={this.handleChange} onBlur={this.handleBlur('job_type')} valid={errors.job_type === ''} invalid={errors.job_type !== ''}>\n                                <option selected disabled> Select Type</option> \n                                <option>Full-Time</option>\n                                <option>Part-Time</option>\n                                <option>Work From Home</option>\n                            </Input>\n                            <FormFeedback>{errors.job_type}</FormFeedback>\n                        </Col>\n                    </FormGroup>\n                    <FormGroup row>\n                        <Label htmlFor=\"duration\" md={2}>Duration</Label>\n                        <Col md={3}>\n                            <Input type=\"select\" name=\"duration\" id=\"duration\" value={this.state.duration} onChange={this.handleChange} onBlur={this.handleBlur('duration')} valid={errors.duration === ''} invalid={errors.duration !== ''}>\n                                <option selected disabled> Select Duration</option> \n                                <option>0</option>\n                                <option>1</option>\n                                <option>2</option>\n                                <option>3</option>\n                                <option>4</option>\n                                <option>5</option>\n                                <option>6</option>\n                            </Input>\n                            <FormFeedback>{errors.duration}</FormFeedback>\n                        </Col>\n                    </FormGroup>\n                    <FormGroup row>\n                        <Label htmlFor=\"salary\" md={2}>Salary</Label>\n                        <Col md={10}>\n                            <Input type=\"number\" id=\"salary\" name=\"salary\" value={this.state.salary} onChange={this.handleChange} onBlur={this.handleBlur('salary')} valid={errors.salary === ''} invalid={errors.salary !== ''}/>\n                            <FormFeedback>{errors.salary}</FormFeedback>\n                        </Col>\n                    </FormGroup>\n                    <FormGroup row>\n                        <Label htmlFor=\"max_positions\" md={2}>Maximum Number of Positions</Label>\n                        <Col md={10}>\n                            <Input type=\"number\" id=\"max_positions\" name=\"max_positions\" value={this.state.max_positions} onChange={this.handleChange} onBlur={this.handleBlur('max_positions')} valid={errors.max_positions === ''}  invalid={errors.max_positions !== ''}/>\n                            <FormFeedback>{errors.max_positions}</FormFeedback>\n                        </Col>\n                    </FormGroup>\n                    <FormGroup row>\n                        <Label htmlFor=\"max_applications\" md={2}>Maximum Number of Applications</Label>\n                        <Col md={10}>\n                            <Input type=\"number\" id=\"max_applications\" name=\"max_applications\" value={this.state.max_applications} onChange={this.handleChange} onBlur={this.handleBlur('max_applications')} valid={errors.max_applications === ''}  invalid={errors.max_applications !== ''}/>\n                            <FormFeedback>{errors.max_applications}</FormFeedback>\n                        </Col>\n                    </FormGroup>\n                    <FormGroup>\n                        <Label htmlFor=\"skills\" md={2}>Skills</Label>\n                        {skil_list}\n                        {button1} {button2}\n                    </FormGroup>\n                    <FormGroup row>\n                        <Label htmlFor=\"deadline\" md={2}>Deadline</Label>\n                        <Col md={10}>\n                            <Input type=\"datetime-local\" id=\"deadline\" name=\"deadline\" value={this.state.deadline} onChange={this.handleChange} onBlur={this.handleBlur('deadline')} valid={errors.deadline===''} invalid={errors.deadline!==''}/>\n                            <FormFeedback>{errors.deadline}</FormFeedback>\n                        </Col>\n                    </FormGroup>\n                    <FormGroup row>\n                        <Col md={{size:3, offset:3}}>\n                        <   Button  onClick={this.handleSubmit}>Submit</Button>\n                        </Col>\n                    </FormGroup>\n                </Form>\n            </div>\n        )\n    }\n}","/home/pavani/Desktop/DASS/Job_Portal/frontend/src/components/UserDashboard.js",["118","119","120","121","122","123","124","125","126","127"],"import React, { Component } from 'react';\nimport {Switch, Route, Redirect, withRouter, BrowserRouter} from 'react-router-dom';\nimport axios from 'axios';\nimport { Breadcrumb, BreadcrumbItem, Button, Form, FormGroup, Label, Input, Col, FormFeedback,Row, Card, CardTitle, CardSubtitle, CardText, Modal, ModalHeader, ModalBody, Table } from 'reactstrap';\nimport NavbarUser from './NavbarUser';\nimport Fuse from 'fuse.js';\n\nexport default class UserDashboard extends Component {\n    constructor()\n    {\n        super();\n        this.state = {\n            jobs: '',\n            applications: '',\n            displayed_arr: '',\n            sortsalary: 0,\n            sortduration:0,\n            sortrating:0,\n            job_type: 'Select Type',\n            begin_sal:null,\n            end_sal:null,\n            duration:'Select Duration',\n            isModalOpen: false,\n            job_id:'',\n            sop:'',\n            search: ''\n        }\n        this.sort = this.sort.bind(this);\n        this.handleChange = this.handleChange.bind(this);\n        this.filter_val = this.filter_val.bind(this);\n        this.updatearr = this.updatearr.bind(this);\n        this.toggleModal = this.toggleModal.bind(this);\n        this.handleSubmit = this.handleSubmit.bind(this);\n        this.executeStuff = this.executeStuff.bind(this);\n        this.handleClear = this.handleClear.bind(this);\n        this.validateSubmit = this.validateSubmit.bind(this);\n        this.handleSearch = this.handleSearch.bind(this);\n    }\n\n    handleSearch()\n    {\n        var temp = this.state.displayed_arr;\n        const fuse = new Fuse(temp, {\n            keys: [\n                'job_title'\n            ]\n        });\n        temp = fuse.search(this.state.search);\n        console.log(temp);\n        var results = temp.map((val) => val.item);\n        this.setState({\n            displayed_arr: results\n        })\n    }\n\n    validateSubmit()\n    {\n        if(this.state.sop === '')\n        {\n            alert(\"Please enter the SOP before submitting\");\n            return false;\n        }\n    }\n\n    handleChange(event)\n    {\n        const target = event.target;\n        const value = target.value;\n        const name = target.name;\n        this.setState({\n            [name] : value\n        });\n    };\n\n    handleClear(event)\n    {\n        window.location.reload();\n    }\n    handleSubmit(event)\n    {\n        if(this.validateSubmit() === false)\n        {\n            return;\n        }\n        var temp={};\n        temp.job_id = this.state.job_id;\n        temp.sop = this.state.sop;\n        temp.status = \"Applied\";\n        axios({\n            method: \"POST\",\n            url: \"http://localhost:3000/applications/\",\n            data: temp,\n            headers: {\n                'Content-Type' : 'application/json',\n            }\n        })\n        .then((response) =>  {\n            console.log(response);\n            alert(\"Applied successfully\");\n            this.executeStuff();\n            this.toggleModal();\n        })\n        .catch((error) => {\n            alert(JSON.stringify(error.response));\n        })\n    }\n\n    toggleModal(event)\n    {\n        if(this.state.isModalOpen === false)\n        {\n            var temp = event.target.id;\n            console.log(temp);\n            this.setState({\n                isModalOpen: true,\n                job_id: temp\n            });\n        }\n        else\n        {\n            this.setState({\n                isModalOpen: false,\n                job_id: '',\n                sop:''\n            });\n        }\n    }\n\n    sort(event)\n    {\n        var temp = this.state.displayed_arr;\n        var name = event.target.name;\n        var id = event.target.id;\n        var t = this.state[name];\n        temp.sort(function(a, b) {\n            if(a[id]!==undefined && b[id]!==undefined)\n                return (1-2*t)*(a[id] - b[id]);\n            else\n                return 1;\n        })\n        this.setState({\n            displayed_arr: temp,\n            [name]: !t\n        });\n    }\n\n    filter_val(event)\n    {\n        var temp = this.state.displayed_arr;\n        if(this.state.job_type !== 'Select Type')\n        {\n            var check = this.state.job_type;\n            temp = temp.filter(function(job){\n                return job.job_type === check;\n            }\n            );\n        }\n        if(this.state.begin_sal !== null && this.state.end_sal!== null)\n        {\n            var begin = this.state.begin_sal;\n            var end = this.state.end_sal;\n            temp = temp.filter(function(job){\n                return job.salary >= begin && job.salary <= end\n            });\n        }\n\n        if(this.state.duration !== 'Select Duration')\n        {\n            check = this.state.duration;\n            temp = temp.filter(function(job){\n                return job.duration < check;\n            });\n        }\n\n        this.setState({\n            displayed_arr: temp\n        })\n    }\n\n    updatearr()\n    {\n        let jobtemp = Array.from(this.state.jobs);\n        let applications = Array.from(this.state.applications);\n        applications = applications.map((appl) => {\n            return appl.job_id._id;\n        });\n        jobtemp = jobtemp.map((job) => {\n            var boolVar = applications.includes(job._id);\n            if(boolVar=== true)\n            {\n                job.state = \"Applied\";\n                return job;\n            }\n            else\n            {\n                if(job.rem_applications === 0 || job.rem_positions === 0)\n                {\n                    console.log(\"I am here\")\n                    job.state = \"Full\";\n                    return job;\n                }\n                else\n                {\n                    job.state = \"Apply\";\n                    return job;\n                }\n            }\n        });\n        this.setState({\n            jobs: jobtemp,\n            displayed_arr: jobtemp,\n        });\n    }\n\n    executeStuff()\n    {\n        axios({\n            method: \"GET\",\n            url: \"http://localhost:3000/jobs/\",\n            data: null,\n            headers: {\n                'Content-Type' : 'application/json',\n            }\n        }).then((response) => {\n            this.setState({\n                jobs : response.data\n            });\n            axios({\n                method: \"GET\",\n                url : \"http://localhost:3000/applications/applicant\",\n                data: null,\n                headers: {\n                    'Content-Type' : 'application/json',\n                }\n            })\n            .then((response) => {\n                console.log(response.data);\n                this.setState({\n                    applications: response.data,\n                }, function(){\n                    this.updatearr()}\n                    );\n            })\n            .catch((err) => console.log(err));\n        }).catch((err) => console.log(err));\n    }\n    componentDidMount()\n    {\n        this.executeStuff();\n    }\n    render()\n    {\n        let jobtemp = Array.from(this.state.displayed_arr);\n        let data = jobtemp.map((job) => {\n            if(new Date(job.deadline) - new Date(Date.now()) < 0)\n                return null;\n            if(job.rem_positions === 0)\n                return null;\n            var button;\n            if(job.state === \"Apply\")\n            {\n                button = <Button id={job._id} onClick={this.toggleModal}>{job.state}</Button>\n            }\n            else\n            {\n                button = <Button id={job._id}>{job.state}</Button>\n            }\n                return(\n                    <Row>\n                    <Col>\n                    <Card body>\n                      <CardTitle tag=\"h5\">{job.job_title}</CardTitle>\n                      <CardText>Id : {job._id}</CardText>\n                      <CardText>Skills : {job.skills}</CardText>\n                      <CardText>Deadline : {job.deadline}</CardText>\n                      <CardText>Duration: {job.duration}</CardText>\n                      <CardText>Salary: {job.salary}</CardText>\n                      <CardText>Remaining Applications : {job.rem_applications}</CardText>\n                      <CardText>Remaining Positions : {job.rem_positions}</CardText>\n                      <CardText>Type of Job : {job.job_type}</CardText>\n                      <CardText>{job.user_id.firstname} {job.user_id.lastname}</CardText>\n                      <CardText>{job.user_id.email}</CardText>\n                      <CardText>{job.rating}</CardText>\n                      {button}\n                    </Card>\n                  </Col>\n                  </Row>\n                )\n            });\n        return(\n            <div className=\"container\">\n                <NavbarUser />\n                {data}\n                <FormGroup row>\n                <Col md={{size:6, offset:3}}> <Button row name=\"sortsalary\" id=\"salary\" onClick={this.sort}>Sort By Salary</Button></Col>\n                </FormGroup>\n                <FormGroup row>\n                <Col md={{size:6, offset:3}}> <Button row name=\"sortduration\" id=\"duration\" onClick={this.sort}>Sort By Duration</Button></Col>\n                </FormGroup>\n                <FormGroup row>\n                <Col md={{size:6, offset:3}}> <Button row name=\"sortrating\" id=\"rating\" onClick={this.sort}>Sort By Rating</Button></Col>\n                </FormGroup>\n                <Form>\n                    <FormGroup row>\n                        <Label htmlFor=\"job_type\" md={2}>Job Type</Label>\n                        <Col md={3}>\n                            <Input type=\"select\" name=\"job_type\" id=\"job_type\" value={this.state.job_type} onChange={this.handleChange}>\n                                <option selected disabled> Select Type</option> \n                                <option>Full-Time</option>\n                                <option>Part-Time</option>\n                                <option>Work From Home</option>\n                            </Input>\n                        </Col>\n                        </FormGroup>\n                        <FormGroup row>\n                            <Label htmlFor=\"salary\" md={2}>Salary</Label>\n                            <Col md={{size:3, offset:2}}>\n                                <Input type=\"number\" name=\"begin_sal\"value={this.state.begin_sal} onChange={this.handleChange}></Input>\n                                <Input type=\"number\" name=\"end_sal\"value={this.state.end_sal} onChange={this.handleChange}></Input>\n                            </Col>\n                        </FormGroup>\n                        <FormGroup row>\n                        <Label htmlFor=\"duration\" md={2}>Duration</Label>\n                        <Col md={3}>\n                            <Input type=\"select\" name=\"duration\" id=\"duration\" value={this.state.duration} onChange={this.handleChange}>\n                                <option selected disabled> Select Duration</option> \n                                <option>1</option>\n                                <option>2</option>\n                                <option>3</option>\n                                <option>4</option>\n                                <option>5</option>\n                                <option>6</option>\n                                <option>7</option>\n                            </Input>\n                        </Col>\n                    </FormGroup>\n                        <FormGroup row >\n                            <Col md={{size:6, offset:3}}>\n                        <Button name=\"filter_type\" onClick={this.filter_val}> Apply</Button>\n                        </Col>\n                        </FormGroup>\n                        <FormGroup row>\n                        <Col md={{size:6, offset:3}}>\n                        <Button onClick={this.handleClear}>Clear</Button>\n                        </Col>\n                        </FormGroup>\n                </Form>\n                <Form>\n                    <Input type=\"text\" name=\"search\" value={this.state.search} onChange={this.handleChange}></Input>\n                    <Button onClick={this.handleSearch}>Search</Button>\n                    <Button onClick={this.handleClear}>Clear</Button>\n                </Form>\n                <Modal isOpen={this.state.isModalOpen} toggle={this.toggleModal} >\n                    <ModalHeader toggle={this.toggleModal}>Apply</ModalHeader>\n                    <ModalBody>\n                        <Form>\n                        <FormGroup row>\n                        <Label htmlFor=\"sop\" md={2}>SOP</Label>\n                        <Col md={10}>\n                            <Input type=\"textarea\" id=\"sop\" name=\"sop\" rows=\"6\" onChange={this.handleChange} value={this.state.sop} ></Input>\n                        </Col>\n                    </FormGroup>\n                    <FormGroup row>\n                        <Col md={{size:3, offset:3}}>\n                        <   Button  onClick={this.handleSubmit}>Submit</Button>\n                        </Col>\n                    </FormGroup>\n                        </Form>\n                    </ModalBody>\n                </Modal>\n            </div>\n        )\n    }\n}","/home/pavani/Desktop/DASS/Job_Portal/frontend/src/components/UserApplications.js",["128","129","130","131","132","133","134","135","136","137"],"import React, { Component } from 'react';\nimport {Switch, Route, Redirect, withRouter, BrowserRouter} from 'react-router-dom';\nimport axios from 'axios';\nimport { Breadcrumb, BreadcrumbItem, Button, Form, FormGroup, Label, Input, Col, FormFeedback,Row, Card, CardTitle, CardSubtitle, CardText, Modal, ModalHeader, ModalBody, NavbarText } from 'reactstrap';\nimport NavbarUser from './NavbarUser';\n\nexport default class UserApplication extends Component {\n    constructor()\n    {\n        super();\n        this.state = {\n            applications: '',\n            applicationId: '',\n            rating: 'Select a Rating',\n            isModalOpen: false,\n            appl_id: '',\n            job_id: ''\n        }\n        this.toggleModal = this.toggleModal.bind(this);\n        this.handleChange = this.handleChange.bind(this);\n        this.handleSubmit = this.handleSubmit.bind(this);\n        this.validateSubmit = this.validateSubmit.bind(this);\n    }\n\n    validateSubmit()\n    {\n        if(this.state.rating === 'Select a Rating')\n        {\n            alert(\"Please select a rating\");\n            return false;\n        }\n        return true;\n    }\n\n    handleSubmit(event)\n    {\n        if(this.validateSubmit() === false)\n            return;\n        var temp = this.state.job_id;\n        var rat = this.state.rating;\n        var id = this.state.appl_id;\n        rat = {\"rating\": rat, \"application_id\":id};    \n        axios({\n            method: \"POST\",\n            url: \"http://localhost:3000/jobs/rateJob/\" + temp,\n            data: rat,\n            headers: {\n                'Content-Type' : 'application/json',\n            }\n        }).then((response) => {\n            alert(\"Rated successfully\");\n            console.log(response);\n            this.setState({\n                rating:'Select a Rating',\n                isModalOpen: false,\n                job_id: '',\n                appl_id: ''\n            })\n        })\n        .catch((error) => {\n            alert(JSON.stringify(error.response));\n        })\n    }\n    handleChange(event)\n    {\n        const target = event.target;\n        const value = target.value;\n        const name = target.name;\n        this.setState({\n            [name] : value\n        });\n    };\n\n    toggleModal(event)\n    {\n        if(this.state.isModalOpen === false)\n        {\n            var temp = event.target.id;\n            var name = event.target.name;\n            console.log(name);\n            console.log(temp);\n            this.setState({\n                isModalOpen: true,\n                job_id: temp,\n                appl_id : name\n            });\n        }\n        else\n        {\n            this.setState({\n                isModalOpen: false,\n                job_id: '',\n                rating: 'Select a Rating',\n                appl_id: ''\n            });\n        }\n    }\n\n    componentDidMount()\n    {\n        axios({\n            method: \"GET\",\n            url : \"http://localhost:3000/applications/applicant\",\n            data: null,\n            headers: {\n                'Content-Type' : 'application/json',\n            }\n        })\n        .then((response) => {\n            console.log(response.data);\n            this.setState({\n                applications: response.data\n            })\n        })\n        .catch((err) => {\n            console.log(err);\n        })\n    }\n    render()\n    {\n        var appl_temp = Array.from(this.state.applications);\n        appl_temp = appl_temp.map((application) => {\n            var button = null;\n            if(application.status === \"Selected\" && application.rated === false)\n            {\n                button =  (\n                        <Button id={application.job_id._id} name={application._id} onClick={this.toggleModal}>Rate</Button>\n                );\n            }            \n            return(\n            <Row>\n                <Col>\n                    <Card body>\n                      <CardTitle tag=\"h5\">{application.job_id.job_title}</CardTitle>\n                      <CardText>Id : {application.job_id._id}</CardText>\n                      <CardText>Skills : {application.job_id.skills}</CardText>\n                      <CardText>Duration: {application.job_id.duration}</CardText>\n                      <CardText>Salary: {application.job_id.salary}</CardText>\n                      <CardText>Type of Job : {application.job_id.job_type}</CardText>\n                      <CardText>{application.job_id.user_id.firstname} {application.job_id.user_id.lastname}</CardText>\n                      <CardText>{application.job_id.user_id.email}</CardText>\n                      <CardText>{application.status}</CardText>\n                      {button}\n                    </Card>\n                </Col>\n            </Row>\n            );\n        })\n        return(\n            <div className=\"container\">\n                <NavbarUser />\n                {appl_temp}\n                <Modal isOpen={this.state.isModalOpen} toggle={this.toggleModal} >\n                    <ModalHeader toggle={this.toggleModal}>Rate</ModalHeader>\n                    <ModalBody>\n                        {this.state.appl_id}\n                        <Form>\n                        <FormGroup row>\n                        <Label htmlFor=\"rating\" md={2}>Rating</Label>\n                        <Col md={10}>\n                            <Input type=\"select\" id=\"rating\" name=\"rating\" onChange={this.handleChange} value={this.state.rating} >\n                                <option selected disabled> Select a Rating</option> \n                                <option>1</option>\n                                <option>2</option>\n                                <option>3</option>\n                                <option>4</option>\n                                <option>5</option>\n                            </Input>\n                        </Col>\n                    </FormGroup>\n                    <FormGroup row>\n                        <Col md={{size:3, offset:3}}>\n                        <   Button  onClick={this.handleSubmit}>Submit</Button>\n                        </Col>\n                    </FormGroup>\n                        </Form>\n                    </ModalBody>\n                </Modal>\n            </div>\n        )\n    }\n}","/home/pavani/Desktop/DASS/Job_Portal/frontend/src/components/UserProfile.js",["138","139","140","141","142","143","144","145","146","147","148","149","150","151","152","153"],"import React, { Component } from 'react';\nimport {Switch, Route, Redirect, withRouter, BrowserRouter} from 'react-router-dom';\nimport axios from 'axios';\nimport { Breadcrumb, BreadcrumbItem, Button, Form, FormGroup, Label, Input, Col, FormFeedback,Row, Card, CardTitle, CardSubtitle, CardText, Modal, ModalHeader, ModalBody, NavbarText } from 'reactstrap';\nimport NavbarUser from './NavbarUser';\n\nexport default class UserProfile extends Component\n{\n    constructor()\n    {\n        super();\n        this.state = {\n            firstname: '',\n            lastname: '',\n            email:'',\n            education: [],\n            num_ed: null,\n            skills: [],\n            num_skill:null,\n            edit: false,\n            ex_skill:'',\n            skills_initial : ['C', 'C++', 'Javascript', 'Python'],\n            selectedFile: null,\n            selectedFile_r : null,\n            touched: {\n                firstname : false,\n                lastname: false,\n                email: false,\n                password: false,\n                select: false,\n                education: [{education_name: false, education_start: false, education_end: false}],\n                skills: [false],\n                bio: false,\n                phone: false\n            }\n        }\n        this.handleEdit = this.handleEdit.bind(this);\n        this.incrementSkill = this.incrementSkill.bind(this);\n        this.incrementEducation = this.incrementEducation.bind(this);\n        this.decrementEducation = this.decrementEducation.bind(this);\n        this.decrementSkill = this.decrementSkill.bind(this);\n        this.executeStuff = this.executeStuff.bind(this);\n        this.handleClear = this.handleClear.bind(this);\n        this.handleChange = this.handleChange.bind(this);\n        this.handleEdChange = this.handleEdChange.bind(this);\n        this.handleSkillChange = this.handleSkillChange.bind(this);\n        this.handleSubmit = this.handleSubmit.bind(this);\n        this.validateSubmit = this.validateSubmit.bind(this);\n        this.validate = this.validate.bind(this);\n        this.extraSkill = this.extraSkill.bind(this);\n    }\n\n    extraSkill()\n    {\n        if(this.state.edit === false)\n            return false;\n        var val = this.state.skills_initial;\n        val.push(this.state.ex_skill);\n        this.setState({\n            skills_initial: val,\n            ex_skill: ''\n        })\n    }\n\n    validateSubmit()\n    {\n        if(this.state.edit === false)\n        {\n            alert(\"Please click on edit button before changing\");\n            return false;\n        }\n        var firstname = this.state.firstname;\n        if(firstname.length === 0)\n        {\n            alert(\"First name is required. Correct before submission\");\n            return false;\n        }\n\n        var lastname = this.state.lastname;\n        if(lastname.length === 0)\n        {\n            alert(\"Last name is required. Correct before submission\");\n            return false;\n        }\n\n        var email = this.state.email;\n        if(email.length === 0)\n        {\n            alert(\"email is required. Correct before submission\");\n            return false;\n        }\n        const reg = /^[a-zA-Z0-9.!#$%&'+/=?^_`{|}~-]+@[a-zA-Z0-9-]+(?:.[a-zA-Z0-9-]+.+(?:.[a-zA-Z0-9-]))$/\n        if(!reg.test(email))\n        {\n            alert(\"Make sure email format is correct\");\n            return false;\n        }\n\n        var select = this.state.type;\n        if(select === 'Select Type')\n        {\n            alert(\"Select the type of user\");\n            return false;\n        }\n\n        var i,n = this.state.num_ed;\n        for(i=0;i<n;i++)\n        {\n            if(this.state['education'][i]['education_name'].length === 0)\n            {\n                alert(\"Make sure all education fields have School/College\");\n                return false;\n            }\n\n            if(this.state['education'][i]['education_start'] <= 0 && this.state['education'][i]['education_start'] !== '')\n            {\n                alert(\"All education start years must be positive\");\n                return false;\n            }\n            \n            if(this.state['education'][i]['education_start'] === '')\n            {\n                alert(\"All education start years are required fields\");\n                return false;\n            }\n\n            if(this.state['education'][i]['education_end'] <= 0 && this.state['education'][i]['education_end'] !== '')\n            {\n                alert(\"All education end years must be positive\");\n                return false;\n            }\n        }\n        n = this.state.num_skill;\n        for(i=0;i<n;i++)\n        {\n            if(this.state['skills'][i] === 'Select a skill')\n            {\n                alert(\"Please remove unnecessary skill fields\");\n                return false;\n            }\n        }\n    }\n\n    handleBlur = (field) => (evt) => {\n        this.setState({\n            touched : { ...this.state.touched, [field]: true}\n        }, console.log(this.state.touched));\n    }\n\n    handleBlurEd = (i, field) => (evt) => {\n        var temp = this.state.touched;\n        temp['education'][i][field] = true;\n        this.setState({\n            touched: temp\n        })\n        console.log(temp);\n    }\n\n    handleBlurSkill = (i) => (evt) => {\n        var temp = this.state.touched;\n        temp['skills'][i] = true;\n        this.setState({\n            touched: temp\n        })\n        console.log(temp);\n    }\n\n    handleEdit()\n    {\n        this.setState({\n            edit:true\n        });\n    }\n\n    handleClear()\n    {\n        this.executeStuff();\n    }\n\n    handleSubmit(event)\n    {\n        if(this.validateSubmit() === false)\n            return;\n        var data = this.state;\n        axios({\n            method: \"PUT\",\n            url: \"http://localhost:3000/applicants\",\n            data: data,\n            headers: {\n                'Content-Type' : 'application/json',\n            }\n        }).then((response) => {\n            alert(\"Successfully updated profile\");\n            console.log(response);\n        }).catch((error) => {\n            alert(JSON.stringify(error.response));\n        })\n        this.executeStuff();\n    }\n\n    onFileChange = event => { \n     \n        // Update the state \n        this.setState({ selectedFile: event.target.files[0] }); \n       \n      }; \n\n      onFileChange_r = event => { \n     \n        // Update the state \n        this.setState({ selectedFile_r: event.target.files[0] }); \n       \n      }; \n       \n      // On file upload (click the upload button) \n      onFileUpload = (event) => { \n        event.preventDefault();\n       \n        if(this.state.selectedFile === null)\n        {\n            alert(\"Please select a valid file\");\n            return;\n        }\n        const formData = new FormData(); \n       \n        formData.append( \n          \"imageFile\", this.state.selectedFile\n        ); \n              \n        axios({\n            method: \"POST\",\n            url: \"http://localhost:3000/applicants/uploadProfilePicture\",\n            data: formData,\n            config: {\n            headers: {\n                'Content-Type' : 'multipart/formdata'\n            }}\n\n        }).then((response) => {\n            alert(\"Uploaded profile picture successfully\");\n        })\n        .catch((error) => {\n            alert(JSON.stringify(error.response));\n        })\n      }; \n      \n      onFileUpload_r = (event) => { \n        event.preventDefault();\n       \n        if(this.state.selectedFile_r === null)\n        {\n            alert(\"Please select a valid file\");\n            return;\n        }\n        const formData = new FormData(); \n       \n        formData.append( \n          \"textFile\", this.state.selectedFile_r\n        ); \n              \n        axios({\n            method: \"POST\",\n            url: \"http://localhost:3000/applicants/uploadResume\",\n            data: formData,\n            config: {\n            headers: {\n                'Content-Type' : 'multipart/formdata'\n            }}\n\n        }).then((response) => {\n            alert(\"Uploaded resume successfully\");\n        })\n        .catch((error) => {\n            alert(JSON.stringify(error.response));\n        })\n      }; \n  \n\n    validate(firstname, lastname, email)\n    {\n        var errors = {\n            firstname : '',\n            lastname : '',\n            password : '',\n            email : '',\n            select:'',\n            education:[],\n            skills:[]\n        };\n\n        if(this.state.touched.firstname && firstname.length === 0)\n        {\n            errors.firstname = 'First Name is required';\n        }\n\n        if(this.state.touched.lastname && lastname.length === 0)\n        {\n            errors.lastname = 'Last Name is required';\n        }\n\n        if(this.state.touched.email && email.length === 0)\n        {\n            errors.email = 'Email is required';\n        }\n        const reg = /^[a-zA-Z0-9.!#$%&'+/=?^_`{|}~-]+@[a-zA-Z0-9-]+(?:.[a-zA-Z0-9-]+.+(?:.[a-zA-Z0-9-]))$/\n        if(this.state.touched.email && !reg.test(email) && email.length !== 0)\n        {\n            errors.email = 'Email is in wrong format'\n        }\n\n        var i,n = this.state.num_ed;\n        console.log(n);\n        for(i=0;i<n;i++)\n        {\n            errors.education.push({education_name:'', education_start: '', education_end:''});\n            if(this.state.touched['education'][i]['education_name'] && this.state['education'][i]['education_name'].length === 0)\n            {\n                errors.education[i]['education_name'] = 'School/College is required';\n            }\n\n            if(this.state.touched['education'][i]['education_start'] && this.state['education'][i]['education_start'] <= 0 && this.state['education'][i]['education_start'] !== '')\n            {\n                errors.education[i]['education_start'] = 'Education Start Year must be positive';\n            }\n            \n            if(this.state.touched['education'][i]['education_start'] && this.state['education'][i]['education_start'] === '')\n            {\n                errors.education[i]['education_start'] = 'Education Start Year is required';\n            }\n\n            if(this.state.touched['education'][i]['education_end'] && this.state['education'][i]['education_end'] <= 0 && this.state['education'][i]['education_end'] !== '')\n            {\n                errors.education[i]['education_end'] = 'Education End Year must be positive';\n            }\n        }\n\n        n = this.state.num_skill;\n        for(i=0;i<n;i++)\n        {\n            errors.skills.push('');\n            console.log(this.state.touched['skills'][i]);\n            if(this.state.touched['skills'][i] && this.state['skills'][i] === 'Select a skill')\n            {\n                errors['skills'][i] = \"Skill is compulsory. Please remove the skill if not required\"\n            }\n        }\n        console.log(errors);\n        return errors;\n    }\n\n    handleChange(event)\n    {\n        if(this.state.edit === true)\n        {\n            const target = event.target;\n            const value = target.value;\n            const name = target.name;\n            this.setState({\n                [name] : value\n            });\n        }\n    };\n\n    handleEdChange(event) {\n        if(this.state.edit === false)\n            return;\n        const target = event.target;\n        const value = target.value;\n        var name = target.name;\n        var i = name[0];\n        var temp = this.state.education;\n        name = name.slice(1);\n        temp[i][name] = value;\n        console.log(temp);\n        this.setState({\n            education: temp\n        })\n    }\n\n    handleSkillChange(event) {\n        if(this.state.edit === false)\n            return;\n        const target = event.target;\n        const value = target.value;\n        var name = target.name;\n        var temp = this.state.skills;\n        temp[name] = value;\n        this.setState({\n            skills: temp\n        })\n    }\n\n    incrementSkill(event)\n    {\n        if(this.state.edit === true)\n        {\n            var t_num = this.state.num_skill+1;\n            var temp = this.state.skills;\n            var temp1 = this.state.touched;\n            temp1['skills'].push(false);\n            temp.push('Select a skill');\n            this.setState({\n                skills: temp,\n                num_skill: t_num,\n                touched: temp1\n            });\n        }\n    }\n\n    incrementEducation(event)\n    {\n        if(this.state.edit === true)\n        {\n            var t_num = this.state.num_ed+1;\n            var temp = this.state.education;\n            var temp1 = this.state.touched;\n\n            temp1['education'].push({education_name: false, education_start: false, education_end: false});\n            temp.push({education_name:'', education_start:'', education_end:''});\n            this.setState({\n                education: temp,\n                num_ed: t_num,\n                touched: temp1\n            });\n        }\n    }\n\n    decrementEducation(event)\n    {\n        if(this.state.edit === true)\n        {\n            if(this.state.num_ed === 0)\n            {\n                return;\n            }\n            var temp1 = this.state.touched;\n            temp1.education.pop();\n            var t_num = this.state.num_ed-1;\n            var temp = this.state.education;\n            temp.pop();\n            \n            this.setState({\n                education: temp,\n                num_ed: t_num,\n                touched: temp1\n            })\n        }\n    }\n\n    decrementSkill(event)\n    {\n        if(this.state.edit === true)\n        {\n            if(this.state.num_skill === 0)\n            {\n                return;\n            }\n            var t_num = this.state.num_skill - 1;\n            var temp = this.state.skills;\n            var temp1 = this.state.touched;\n            temp1.skills.pop();\n            temp.pop();\n            this.setState({\n                skills: temp,\n                num_skill: t_num,\n                touched: temp1\n            });\n        }\n    }\n\n    executeStuff()\n    {\n        axios({\n            method: \"GET\",\n            url: \"http://localhost:3000/applicants\",\n            data: null,\n            headers: {\n                'Content-Type' : 'application/json',\n            }\n        })\n        .then((response) => {\n            console.log(response);\n            var data = response.data;\n            var temp = data;\n            var temp1 = temp.education;\n            temp1 = Array.from(temp1);\n            console.log(temp1)\n            var temp2 = temp.skills;\n            temp2 = Array.from(temp2);\n            var i, n1=temp1.length;\n            var temp3 = this.state.touched;\n            temp3['education'] = [];\n            for(i=0;i<n1;i++)\n            {\n                temp3['education'].push({education_name: false, education_start: false, education_end: false});\n                if(temp1[i].education_end === null)\n                    temp1[i].education_end = '';\n            }\n            n1 = temp2.length;\n            temp3['skills'] = [];\n            for(i=0;i<n1;i++)\n            {\n                temp3['skills'].push(false);\n            }\n            this.setState({\n                firstname : data.firstname,\n                lastname: data.lastname,\n                email: data.email,\n                education: temp1,\n                num_ed: temp1.length,\n                skills: temp2,\n                num_skill: temp2.length,\n                touched: temp3,\n                edit: false\n            });\n        })\n        .catch((err) => {\n            console.log(err);\n        })\n    }\n\n    componentDidMount()\n    {\n        this.executeStuff();\n    }\n\n    render()\n    {\n        let skills = this.state.skills_initial;\n        let skills_list = skills.length > 0 && skills.map((item, i) => {\n            return(\n                <option key={i} value={item}>{item}</option>\n            )\n        }, this);\n        skills_list.push(<option selected disabled>Select a skill</option>)\n        var temp_list = [];\n        var i;\n        var errors = this.validate(this.state.firstname, this.state.lastname, this.state.email);\n        for(i=0;i<this.state.num_ed;i++)\n        {\n            let name_temp = i +\"education_name\";\n            let start_temp = i +\"education_start\";\n            let end_temp = i +\"education_end\";\n            temp_list.push(\n                <FormGroup row>\n                    <Label htmlFor=\"education\" md={2}></Label>\n                    <Col md={10}>\n                        <Input type=\"text\" id={name_temp} name={name_temp} placeholder=\"School/College\" value={this.state.education[i].education_name} onChange={this.handleEdChange} onBlur={this.handleBlurEd(i, \"education_name\")} valid={errors.education[i]['education_name'] === ''} invalid={errors.education[i]['education_name'] !== ''}/>\n                        <FormFeedback>{errors.education[i]['education_name']}</FormFeedback>\n                        <Input type=\"number\" id={start_temp} name={start_temp} value={this.state.education[i].education_start} onChange={this.handleEdChange} onBlur={this.handleBlurEd(i, \"education_start\")} valid={errors.education[i]['education_start'] === ''} invalid={errors.education[i]['education_start'] !== ''}/>\n                        <FormFeedback>{errors.education[i]['education_start']}</FormFeedback>\n                        <Input type=\"number\" id={end_temp} name={end_temp} value={this.state.education[i].education_end} onChange={this.handleEdChange}  onBlur={this.handleBlurEd(i, \"education_end\")} valid={errors.education[i]['education_end'] === ''} invalid={errors.education[i]['education_end'] !== ''}/>\n                        <FormFeedback>{errors.education[i]['education_end']}</FormFeedback>\n                    </Col>\n                </FormGroup>\n            );\n        }\n        var ski_list = [];\n        for(i=0;i<this.state.num_skill;i++)\n        {\n            ski_list.push(\n                <FormGroup row>\n                    <Label htmlFor=\"skills\" md={2}>Skills</Label>\n                    <Col md={3}>\n                    <Input type=\"select\" id={i} name={i} value={this.state.skills[i]} onChange={this.handleSkillChange} onBlur={this.handleBlurSkill(i)} valid={errors.skills[i] === ''} invalid={errors.skills[i] !== ''}>{skills_list}</Input>\n                    <FormFeedback>{errors.skills[i]}</FormFeedback>\n                    </Col>\n                </FormGroup>\n            );\n        }\n        let val = (\n            <div>\n                <FormGroup row>\n                    <Label htmlFor=\"education\" md={2}>Education</Label>\n                </FormGroup>\n                {temp_list}\n            </div>\n        );\n        var button1 = <Button Col md={{size:3, offset:3}} onClick={this.incrementEducation}>Add one more education</Button>\n        var button2 = <Button Col md={{size:3, offset:3}} onClick={this.decrementEducation}>Remove one education</Button>\n        var button3 = <Button Col md={{size:3, offset:3}} onClick={this.incrementSkill}>Add one more skill field</Button>\n        var button4 = <Button Col md={{size:3, offset:3}} onClick={this.decrementSkill}>Remove one skill field</Button>\n        return(\n            <div className=\"container\">\n                <NavbarUser />\n                <Form>\n                    <FormGroup row>\n                        <Label htmlFor=\"firstname\" md={2}>First Name</Label>\n                        <Col md={10}>\n                            <Input type=\"text\" id=\"firstname\" name=\"firstname\" placeholder=\"First Name\" required onChange={this.handleChange} value={this.state.firstname} onBlur={this.handleBlur('firstname')} valid={errors.firstname === ''} invalid={errors.firstname !== ''} />\n                            <FormFeedback>{errors.firstname}</FormFeedback>\n                        </Col>\n                    </FormGroup>\n                    <FormGroup row>\n                        <Label htmlFor=\"lastname\" md={2}>Last Name</Label>\n                        <Col md={10}>\n                            <Input type=\"text\" id=\"lastname\" name=\"lastname\" placeholder=\"Last Name\" onChange={this.handleChange} value={this.state.lastname} onBlur={this.handleBlur('lastname')} valid={errors.lastname === ''} invalid={errors.lastname !== ''}/>\n                            <FormFeedback>{errors.lastname}</FormFeedback>\n                        </Col>\n                    </FormGroup>\n                    <FormGroup row>\n                        <Label htmlFor=\"email\" md={2}>Email</Label>\n                        <Col md={10}>\n                            <Input type=\"email\" id=\"email\" name=\"email\" placeholder=\"someone@example.com\" onChange={this.handleChange} value={this.state.email}  onBlur={this.handleBlur('email')} valid={errors.email === ''} invalid={errors.email !== ''}/>\n                            <FormFeedback>{errors.email}</FormFeedback>\n                        </Col>\n                    </FormGroup>\n\n                    {val}\n                    <FormGroup row>\n                        <Col md={{size:3, offset:3}}>\n                        {button1}\n                        </Col>\n                        <Col md={{size:3, offset:3}}>\n                        {button2}\n                        </Col>\n                    </FormGroup>\n                    {ski_list}\n                    <FormGroup row>\n                        <Col md={{size:3, offset:3}}>\n                        {button3}\n                        </Col>\n                        <Col md={{size:3, offset:3}}>\n                        {button4}\n                        </Col>\n                    </FormGroup>\n                    <FormGroup row>\n                    <Label htmlFor=\"email\" md={2}>Add to dropdown</Label>\n                    <Col md={10}>\n                        <Input type=\"text\" name=\"ex_skill\" value={this.state.ex_skill} onChange={this.handleChange} ></Input>\n                       <Button onClick={this.extraSkill}>Add skill to dropdown</Button>\n                    </Col>\n                       \n                   </FormGroup>\n                   <FormGroup row>\n                        <Label htmlFor=\"resume\" md={2}>Resume</Label>\n                        <Col md={10}>\n                            <Input type=\"file\" name=\"textFile\" onChange={this.onFileChange_r}/>\n                            <Button onClick={this.onFileUpload_r}>Upload!</Button>\n                        </Col>\n                    </FormGroup>\n                    <FormGroup row>\n                        <Label htmlFor=\"profilePic\" md={2}>Profile Picture</Label>\n                        <Col md={10}>\n                            <Input type=\"file\" name=\"imageFile\" onChange={this.onFileChange} />\n                            <Button onClick={this.onFileUpload}>Upload!</Button>\n                        </Col>\n                    </FormGroup>\n                    <FormGroup row>\n                        <Col md={{size:2, offset:2}}>\n                        < Button  onClick={this.handleEdit}>Edit</Button>\n                        </Col>\n                        <Col md={{size:2, offset:2}}>\n                        < Button  onClick={this.handleClear}>Clear</Button>\n                        </Col>\n                        <Col md={{size:2, offset:2}}>\n                        < Button  onClick={this.handleSubmit}>Submit</Button>\n                        </Col>\n                    </FormGroup>\n                </Form>\n            </div>\n        )\n    }\n    \n}","/home/pavani/Desktop/DASS/Job_Portal/frontend/src/components/RecruiterProfile.js",["154","155","156","157","158","159","160","161","162","163","164","165","166","167","168"],"import React, { Component } from 'react';\nimport {Switch, Route, Redirect, withRouter, BrowserRouter} from 'react-router-dom';\nimport axios from 'axios';\nimport { Breadcrumb, BreadcrumbItem, Button, Form, FormGroup, Label, Input, Col, FormFeedback,Row, Card, CardTitle, CardSubtitle, CardText, Modal, ModalHeader, ModalBody } from 'reactstrap';\nimport NavbarRecruitment from './NavbarRecruiter';\nexport default class Recruitment extends Component\n{\n    constructor()\n    {\n        super();\n        this.state = {\n            firstname: '',\n            lastname: '',\n            email:'',\n            phone:'',\n            bio:'',\n            edit: false,\n            touched: {\n                firstname : false,\n                lastname: false,\n                email: false,\n                password: false,\n                bio: false,\n                phone: false\n            }\n        }\n        this.executeStuff = this.executeStuff.bind(this);\n        this.handleEdit = this.handleEdit.bind(this);\n        this.handleClear = this.handleClear.bind(this);\n        this.handleSubmit = this.handleSubmit.bind(this);\n        this.handleChange = this.handleChange.bind(this);\n        this.validateSubmit = this.validateSubmit.bind(this);\n    }\n\n    validate(firstname, lastname, email)\n    {\n        var errors = {\n            firstname : '',\n            lastname : '',\n            password : '',\n            email : '',\n            select:'',\n            bio: '',\n            phone: ''\n        };\n\n        if(this.state.touched.firstname && firstname.length === 0)\n        {\n            errors.firstname = 'First Name is required';\n        }\n\n        if(this.state.touched.lastname && lastname.length === 0)\n        {\n            errors.lastname = 'Last Name is required';\n        }\n\n        if(this.state.touched.email && email.length === 0)\n        {\n            errors.email = 'Email is required';\n        }\n        const reg = /^[a-zA-Z0-9.!#$%&'+/=?^_`{|}~-]+@[a-zA-Z0-9-]+(?:.[a-zA-Z0-9-]+.+(?:.[a-zA-Z0-9-]))$/\n        if(this.state.touched.email && !reg.test(email) && email.length !== 0)\n        {\n            errors.email = 'Email is in wrong format'\n        }\n\n        const reg1 = /^\\d{10}$/;\n        if(this.state.touched.phone && !reg1.test(this.state.phone) && this.state.phone !== '')\n        {\n            errors.phone = \"Phone number is in the wrong format\"\n        }\n        var bio = this.state.bio;\n        if(this.state.touched.bio && bio.split(' ').length > 250)\n        {\n            errors.bio = \"Bio must have less than 250 words\";\n        }\n        return errors;\n    }\n\n    executeStuff()\n    {\n        axios({\n            method: \"GET\",\n            url: \"http://localhost:3000/recruiters\",\n            data: null,\n            headers: {\n                'Content-Type' : 'application/json',\n            }\n        })\n        .then((response) => {\n            console.log(response.data);\n            this.setState({\n                firstname: response.data.firstname,\n                lastname: response.data.lastname,\n                email: response.data.email,\n                phone: response.data.phone,\n                bio: response.data.bio,\n                edit: false\n            })\n        })\n        .catch((err) => {\n            console.log(err);\n        })\n    }\n\n\n    validateSubmit()\n    {\n        var firstname = this.state.firstname;\n        if(firstname.length === 0)\n        {\n            alert(\"First name is required. Correct before submission\");\n            return false;\n        }\n\n        var lastname = this.state.lastname;\n        if(lastname.length === 0)\n        {\n            alert(\"Last name is required. Correct before submission\");\n            return false;\n        }\n\n        var email = this.state.email;\n        if(email.length === 0)\n        {\n            alert(\"email is required. Correct before submission\");\n            return false;\n        }\n        const reg = /^[a-zA-Z0-9.!#$%&'+/=?^_`{|}~-]+@[a-zA-Z0-9-]+(?:.[a-zA-Z0-9-]+.+(?:.[a-zA-Z0-9-]))$/\n        if(!reg.test(email))\n        {\n            alert(\"Make sure email format is correct\");\n            return false;\n        }\n\n        const reg1 = /^\\d{10}$/;\n        if(this.state.touched.phone && !reg1.test(this.state.phone) && this.state.phone !== '')\n        {\n            alert(\"Please use a valid phone number. Also note that it is not a required field\");\n            return false;\n        }\n        var bio = this.state.bio;\n        if( bio.split(' ').length > 250)\n        {\n            alert(\"Bio must have less than 250 words\");\n            return false;\n        }\n        return true;\n    }\n\n    handleChange(event)\n    {\n        if(this.state.edit === true)\n        {\n            const target = event.target;\n            const value = target.value;\n            const name = target.name;\n            this.setState({\n                [name] : value\n            });\n        }\n    };\n\n    handleBlur = (field) => (evt) => {\n        this.setState({\n            touched : { ...this.state.touched, [field]: true}\n        }, console.log(this.state.touched));\n    }\n\n    handleEdit()\n    {\n        this.setState({\n            edit:true\n        });\n    }\n\n    handleClear()\n    {\n       this.executeStuff();\n    }\n\n    handleSubmit(event)\n    {\n        if(this.state.edit === false)\n        {\n            alert(\"Please select the edit option\");\n            return;\n        }\n        if(this.validateSubmit() === false)\n        {\n            return;\n        }\n        var data = this.state;\n        axios({\n            method: \"PUT\",\n            url: \"http://localhost:3000/recruiters\",\n            data: data,\n            headers: {\n                'Content-Type' : 'application/json',\n            }\n        }).then((response) => {\n            alert(\"Successfully updated profile\");\n            console.log(response);\n        }).catch((error) => {\n            alert(JSON.stringify(error.response));\n        })\n    }\n\n    componentDidMount()\n    {\n        this.executeStuff();\n    }\n\n    render()\n    {\n        var errors = this.validate(this.state.firstname, this.state.lastname, this.state.email);\n        return(\n            <div className=\"container\">\n                <NavbarRecruitment />\n                <Form>\n                <FormGroup row>\n                        <Label htmlFor=\"firstname\" md={2}>First Name</Label>\n                        <Col md={10}>\n                            <Input type=\"text\" id=\"firstname\" name=\"firstname\" placeholder=\"First Name\" required onChange={this.handleChange} value={this.state.firstname} onBlur={this.handleBlur('firstname')} valid={errors.firstname === ''} invalid={errors.firstname !== ''} />\n                            <FormFeedback>{errors.firstname}</FormFeedback>\n                        </Col>\n                    </FormGroup>\n                    <FormGroup row>\n                        <Label htmlFor=\"lastname\" md={2}>Last Name</Label>\n                        <Col md={10}>\n                            <Input type=\"text\" id=\"lastname\" name=\"lastname\" placeholder=\"Last Name\" onChange={this.handleChange} value={this.state.lastname} onBlur={this.handleBlur('lastname')} valid={errors.lastname === ''} invalid={errors.lastname !== ''}/>\n                            <FormFeedback>{errors.lastname}</FormFeedback>\n                        </Col>\n                    </FormGroup>\n                    <FormGroup row>\n                        <Label htmlFor=\"email\" md={2}>Email</Label>\n                        <Col md={10}>\n                            <Input type=\"email\" id=\"email\" name=\"email\" placeholder=\"someone@example.com\" onChange={this.handleChange} value={this.state.email}  onBlur={this.handleBlur('email')} valid={errors.email === ''} invalid={errors.email !== ''}/>\n                            <FormFeedback>{errors.email}</FormFeedback>\n                        </Col>\n                    </FormGroup>\n                    <FormGroup row>\n                        <Label htmlFor=\"phone\" md={2}>Contact Number</Label>\n                        <Col md={10}>\n                            <Input type=\"tel\" id=\"phone\" name=\"phone\" placeholder=\"Contact Number\" onChange={this.handleChange} onBlur={this.handleBlur('phone')} valid={errors.phone===''} invalid={errors.phone !== ''} value={this.state.phone}/>\n                            <FormFeedback>{errors.phone}</FormFeedback>\n                        </Col>\n                    </FormGroup>\n                    <FormGroup row>\n                        <Label htmlFor=\"bio\" md={2}>Your Bio</Label>\n                        <Col md={10}>\n                            <Input type=\"textarea\" id=\"bio\" name=\"bio\" rows=\"6\" onChange={this.handleChange} onBlur={this.handleBlur('bio')} valid={errors.bio===''} invalid={errors.bio !== ''} value={this.state.bio} />\n                            <FormFeedback>{errors.bio}</FormFeedback>\n                        </Col>\n                    </FormGroup>\n                    <FormGroup row>\n                        <Col md={{size:3, offset:3}}>\n                        < Button  onClick={this.handleEdit}>Edit</Button>\n                        </Col>\n                        <Col md={{size:3, offset:3}}>\n                        < Button  onClick={this.handleClear}>Clear</Button>\n                        </Col>\n                        <Col md={{size:3, offset:3}}>\n                        < Button  onClick={this.handleSubmit}>Submit</Button>\n                        </Col>\n                    </FormGroup>\n                </Form>\n            </div>\n        )\n    }\n}","/home/pavani/Desktop/DASS/Job_Portal/frontend/src/components/RecruiterDashboard.js",["169","170","171","172","173","174","175","176","177"],"import React, { Component } from 'react';\nimport {Switch, Route, Redirect, withRouter, BrowserRouter, Link} from 'react-router-dom';\nimport axios from 'axios';\nimport { Breadcrumb, BreadcrumbItem, Button, Form, FormGroup, Label, Input, Col, FormFeedback,Row, Card, CardTitle, CardSubtitle, CardText, Modal, ModalHeader, ModalBody } from 'reactstrap';\nimport NavbarRecruitment from './NavbarRecruiter';\n\nexport default class RecruiterDashboard extends Component\n{\n    constructor()\n    {\n        super();\n        this.state = {\n            jobs: [],\n            isModalOpen:false,\n            cur_job:'',\n        }\n        this.executeStuff = this.executeStuff.bind(this);\n        this.toggleModal = this.toggleModal.bind(this);\n        this.handleChange = this.handleChange.bind(this); \n        this.handleSubmit = this.handleSubmit.bind(this); \n        this.deleteJob = this.deleteJob.bind(this);\n        this.validateSubmit = this.validateSubmit.bind(this);\n    }\n\n    validateSubmit()\n    {\n        console.log(this.state.cur_job.deadline);\n        if(this.state.cur_job.deadline === '')\n        {\n            alert(\"Please select the new Deadline as Deadline is compulsory\");\n            return false;\n        }\n        if(new Date(this.state.cur_job.deadline) - new Date(Date.now()) < 0)\n        {\n            alert(\"Deadline must be after the current date and time\");\n            return false;\n        }\n        if(this.state.cur_job.max_applications === '' || this.state.cur_job.max_applications <= 0)\n        {\n            alert(\"Maximum applications is compulsory and must be positive. Make sure the number is higher than current number of applicants\");\n            return false;\n        }\n        if(this.state.cur_job.max_positions === '' || this.state.cur_job.max_positions <= 0)\n        {\n            alert(\"Maximum positions is compulsory and must be positive. Make sure the number is higher than current number of accepted applicants\");\n            return false;\n        }\n        return true;\n    }\n\n    deleteJob(event)\n    {\n        var job_id = event.target.id;\n        axios({\n            method:\"DELETE\",\n            url:\"http://localhost:3000/jobs/\"+job_id,\n            data: null,\n            headers: {\n                'Content-type' : 'application/json'\n            }\n        })\n        .then((response) => {\n            console.log(response);\n            alert(\"Deletion successful\");\n            this.executeStuff();\n            this.render();\n        })\n        .catch((err) => console.log(err));\n    }\n\n    handleChange(event)\n    {\n        const target = event.target;\n        const value = target.value;\n        const name = target.name;\n        const temp1 = this.state.cur_job;\n        temp1[name] = value;\n        this.setState({\n            cur_job: temp1,\n        });\n    };\n    toggleModal(event)\n    {\n        if(this.state.isModalOpen === false)\n        {\n            var index = event.target.id;\n            var temp = this.state.jobs;\n            this.setState({\n                isModalOpen: true,\n                cur_job: temp[index],\n            })\n        }\n        else\n        {\n            this.setState({\n                isModalOpen: false,\n                cur_job: '',\n                min_applications:'',\n                min_positions:'0'\n            }, this.executeStuff());\n        }\n    }\n\n    handleSubmit(event)\n    {\n        if(this.validateSubmit() === false)\n            return;\n        var job = this.state.cur_job;\n        axios({\n            method:\"PUT\",\n            url: \"http://localhost:3000/jobs/\"+job._id,\n            data: job, \n            headers: {\n                'Content-type' :'application/json'\n            }\n        })\n        .then((response) => {\n            console.log(response);\n            alert(\"Edit successful\");\n            this.executeStuff();\n        })\n        .catch((error) => {\n            alert(JSON.stringify(error.response));\n        })\n    }\n\n    executeStuff()\n    {\n        axios({\n            method: \"GET\",\n            url: \"http://localhost:3000/jobs/recruiter\",\n            data: null,\n            headers: {\n                'Content-Type' : 'application/json'\n            }\n        })\n        .then((response) => {\n            console.log(response.data);\n            this.setState({\n                jobs: response.data,\n                isModalOpen: false\n            })\n        })\n        .catch((err) => {\n            console.log(err);\n        })\n    }\n\n    componentDidMount()\n    {\n        this.executeStuff();\n    }\n\n    render()\n    {\n        var temp_job = Array.from(this.state.jobs);\n        temp_job = temp_job.map((job,i) => {\n            if(job.rem_positions === 0)\n            {\n                return null;\n            }\n            return(\n                <Row>\n                <Col>\n                    <Card body>\n                      <CardTitle tag=\"h5\">{job.job_title}</CardTitle>\n                      <CardText>Id : {job._id}</CardText>\n                      <CardText>Skills : {job.skills}</CardText>\n                      <CardText>Deadline : {job.deadline}</CardText>\n                      <CardText>Duration: {job.duration}</CardText>\n                      <CardText>Salary: {job.salary}</CardText>\n                      <CardText>Maximum Applications : {job.max_applications}</CardText>\n                      <CardText>Maximum Positions : {job.max_positions}</CardText>\n                      <CardText>Remaining Applications : {job.rem_applications}</CardText>\n                      <CardText>Remaining Positions : {job.rem_positions}</CardText>\n                      <CardText>Type of Job : {job.job_type}</CardText>\n                      <Button id={i} onClick={this.toggleModal}>Edit</Button>\n                      <Button id={job._id} onClick={this.deleteJob}>Delete Job</Button>\n                      <Link to={`/recruiter/viewJob/${job._id}`}><Button> View Applications</Button> </Link>\n                    </Card>\n                </Col>\n            </Row>\n            )\n        })\n        console.log(this.state);\n        return(\n            <div className=\"container\">\n                <NavbarRecruitment />\n                {temp_job}\n                <Modal isOpen={this.state.isModalOpen} toggle={this.toggleModal} >\n                    <ModalHeader toggle={this.toggleModal}>Apply</ModalHeader>\n                    <ModalBody>\n                        <Form>\n                        <FormGroup row>\n                        <Label htmlFor=\"deadline\" md={2}>Deadline</Label>\n                        <Col md={10}>\n                            <Input type=\"datetime-local\" id=\"deadline\" name=\"deadline\" rows=\"deadline\" onChange={this.handleChange} value={this.state.cur_job.deadline} ></Input>\n                        </Col>\n                    </FormGroup>\n                    <FormGroup row>\n                        <Label htmlFor=\"max_applications\" md={2}>Maximum Applications</Label>\n                        <Col md={10}>\n                            <Input type=\"number\" id=\"max_applications\" name=\"max_applications\" rows=\"max_applications\" onChange={this.handleChange} value={this.state.cur_job.max_applications} ></Input>\n                        </Col>\n                    </FormGroup>\n                    <FormGroup row>\n                        <Label htmlFor=\"max_positions\" md={2}>Maximum Positions</Label>\n                        <Col md={10}>\n                            <Input type=\"number\" id=\"max_positions\" name=\"max_positions\" rows=\"max_positions\" onChange={this.handleChange} value={this.state.cur_job.max_positions} ></Input>\n                        </Col>\n                    </FormGroup>\n                    <FormGroup row>\n                        <Col md={{size:3, offset:3}}>\n                        <   Button  onClick={this.handleSubmit}>Submit</Button>\n                        </Col>\n                    </FormGroup>\n                        </Form>\n                    </ModalBody>\n                </Modal>\n            </div>\n        )\n    }\n}","/home/pavani/Desktop/DASS/Job_Portal/frontend/src/components/viewApplicants.js",["178","179","180","181","182","183","184","185","186","187","188","189","190","191","192","193","194"],"import React, { Component } from 'react';\nimport {Switch, Route, Redirect, withRouter, BrowserRouter} from 'react-router-dom';\nimport axios from 'axios';\nimport { Breadcrumb, BreadcrumbItem, Button, Form, FormGroup, Label, Input, Col, FormFeedback,Row, Card, CardTitle, CardSubtitle, CardText, Modal, ModalHeader, ModalBody } from 'reactstrap';\nimport NavbarRecruitment from './NavbarRecruiter';\n\nexport default class ViewApplicant extends Component\n{\n    constructor(props)\n    {\n        super(props);\n        this.state = {\n            applications: [],\n            sortrating:0,\n            sortdate: 0,\n            sortname: 0\n        }\n        this.executeStuff = this.executeStuff.bind(this);\n        this.handleSubmit = this.handleSubmit.bind(this);\n        this.sortname = this.sortname.bind(this);\n        this.sortdate = this.sortdate.bind(this);\n        this.sortrating = this.sortrating.bind(this);\n        this.downloadResume = this.downloadResume.bind(this);\n    }\n\n    downloadResume(event)\n    {\n        var id = event.target.id;\n        event.preventDefault();\n        window.open('http://localhost:3000/download/'+id);\n        // axios({\n        //     method: \"GET\",\n        //     url: 'http://localhost:3000/download/'+id,\n        //     data: null,\n        //     headers: {\n        //         'Content-Type' : 'application/json'\n        //     }\n        // })\n        // .then((response) => console.log(response))\n        // .catch((error) => {\n        //     alert(JSON.stringify(error.response));\n        // })\n    }\n\n    sortname(event)\n    {\n        var temp = this.state.applications;\n        var t = this.state.sortname;\n        temp.sort(function(a,b) {\n            a = a.user_id.firstname + a.user_id.lastname;\n            b = b.user_id.firstname + b.user_id.firstname;\n            return (1-2*t)*(a.localeCompare(b))\n        });\n        this.setState({\n            applications: temp,\n            sortname: !t\n        })\n    }\n    \n    sortdate(event)\n    {\n        var temp = this.state.applications;\n        var t = this.state.sortdate;\n        temp.sort(function(a,b)\n        {\n            console.log((1-2*t)*(new Date(a.application_date) - new Date(b.application_date)), t);\n            return (1-2*t)*(new Date(a.application_date) - new Date(b.application_date));\n        });\n        this.setState({\n            applications: temp,\n            sortdate: !t\n        })\n    }\n\n    sortrating(event)\n    {\n        var temp = this.state.applications;\n        var t = this.state.sortname;\n        temp.sort(function(a,b)\n        {\n            return(a.user_id.rating - b.user_id.rating)*(1-2*t);\n        })\n        this.setState({\n            applications: temp,\n            sortrating: !t\n        })\n    }\n\n    handleSubmit(event)\n    {\n        var name = event.target.name;\n        var id = event.target.id;\n        var data = {};\n        data.status = name;\n        axios({\n            method: \"PUT\",\n            url:\"http://localhost:3000/applications/\"+id,\n            data: data,\n            headers: {\n                'Content-type' : 'application/json'\n            }\n        })\n        .then((response) => {\n            alert(\"Operation Successful\");\n            console.log(response);\n            this.executeStuff();\n            this.render();\n        })\n        .catch((error) => {\n            alert(JSON.stringify(error.response));\n        })\n    }\n\n    executeStuff()\n    {\n        var job_id = this.props.job_id;\n        axios({\n            method:\"GET\",\n            url:\"http://localhost:3000/applications/job/\" + job_id,\n            data: null,\n            headers: {\n                'Content-type' : 'application/json'\n            }\n        })\n        .then((response) => {\n            console.log(response.data);\n            this.setState({\n                applications: response.data\n            })\n        })\n        .catch((err) => console.log(err))\n    }\n\n    componentDidMount()\n    {\n        this.executeStuff();\n    }\n\n    render()\n    {\n        var temp_appl = Array.from(this.state.applications);\n        temp_appl = temp_appl.map((application,i) => {\n            if(application.status === \"Rejected\")\n            {\n                return null;\n            }\n            var skills_list = application.user_id.skills.map((skill) => {\n                return(\n                    <p>{skill}</p>\n                )\n            });\n            var ed_list = application.user_id.education.map((education) => {\n                return(\n                    <div>\n                        <p>{education.name}</p>\n                        <p>{education.start}</p>\n                        <p>{education.end}</p>\n                    </div>\n                )\n            });\n            var button;\n            var button2;\n            if(application.user_id.resume === true)\n                var button3 = <Button id={application.user_id._id} onClick={this.downloadResume}>Download Resume</Button>\n            else\n                var button3 = <Button>Resume not available</Button>\n            if(application.status === \"Applied\")\n            {\n                button = <Button id={application._id} name=\"Shortlisted\" onClick={this.handleSubmit}> Shortlist </Button>\n                button2 = <Button id={application._id} name=\"Rejected\" onClick={this.handleSubmit}>Reject</Button>\n            }\n            else if(application.status === \"Shortlisted\")\n            {\n                button = <Button id={application._id} name=\"Selected\" onClick={this.handleSubmit}>Accept</Button>\n                button2 = <Button id={application._id} name=\"Rejected\" onClick={this.handleSubmit}>Reject</Button>\n            }\n            return(\n                <Row>\n                    <Col>\n                    <Card body>\n                      <CardText>{application.user_id.firstname}</CardText>\n                      <CardText> {application.user_id.lastname}</CardText>\n                      <CardText>{application.application_date}</CardText>\n                      <CardText>{skills_list}</CardText>\n                      <CardText>{ed_list}</CardText>\n                      <CardText>{application.status}</CardText>\n                      <CardText>{application.user_id.rating}</CardText>\n                      {button}\n                      {button2}\n                      {button3}\n                    </Card>\n                    </Col>\n                </Row>\n                \n            )\n        })\n        return(\n            <div className=\"container\">\n                <NavbarRecruitment />\n                {temp_appl}\n                <FormGroup row>\n                <Col md={{size:6, offset:3}}> <Button row name=\"name\" id=\"name\" onClick={this.sortname}>Sort By Name</Button></Col>\n                </FormGroup>\n                <FormGroup row>\n                <Col md={{size:6, offset:3}}> <Button row name=\"sortdate\"  onClick={this.sortdate}>Sort By Date</Button></Col>\n                </FormGroup>\n                <FormGroup row>\n                <Col md={{size:6, offset:3}}> <Button row name=\"sortrating\" id=\"rating\" onClick={this.sortrating}>Sort By Rating</Button></Col>\n                </FormGroup>\n            </div>\n        )\n    }\n} ","/home/pavani/Desktop/DASS/Job_Portal/frontend/src/components/viewEmployees.js",["195","196","197","198","199","200","201","202","203","204","205"],"import React, { Component } from 'react';\nimport {Switch, Route, Redirect, withRouter, BrowserRouter} from 'react-router-dom';\nimport axios from 'axios';\nimport { Breadcrumb, BreadcrumbItem, Button, Form, FormGroup, Label, Input, Col, FormFeedback,Row, Card, CardTitle, CardSubtitle, CardText, Modal, ModalHeader, ModalBody, NavbarText } from 'reactstrap';\nimport NavbarRecruitment from './NavbarRecruiter';\n\nexport default class ViewEmployees extends Component\n{\n    constructor()\n    {\n        super();\n        this.state = {\n            applications: '',\n            isModalOpen: false,\n            rating: 'Select a Rating',\n            appl_id: '',\n            sortrating:0,\n            sortdate: 0,\n            sortname: 0,\n            sortjobname: 0\n\n        }\n        this.executeStuff = this.executeStuff.bind(this);\n        this.toggleModal = this.toggleModal.bind(this);\n        this.handleChange = this.handleChange.bind(this);\n        this.handleSubmit = this.handleSubmit.bind(this);\n        this.sortbytitle = this.sortbytitle.bind(this);\n        this.sortdate = this.sortdate.bind(this);\n        this.sortrating = this.sortrating.bind(this);\n        this.sortname = this.sortname.bind(this);\n    }\n\n    sortname(event)\n    {\n        console.log(\"Clicked\");\n        var temp = this.state.applications;\n        var t = this.state.sortname;\n        temp.sort(function(a,b) {\n            a = a.user_id.firstname + a.user_id.lastname;\n            b = b.user_id.firstname + b.user_id.firstname;\n            return (1-2*t)*(a.localeCompare(b))\n        });\n        this.setState({\n            applications: temp,\n            sortname: !t\n        })\n        console.log(!t);\n    }\n\n    sortdate(event)\n    {\n        var temp = this.state.applications;\n        var t = this.state.sortdate;\n        temp.sort(function(a,b)\n        {\n            return (1-2*t)*(new Date(a.joining_date) - new Date(b.joining_date));\n        });\n        this.setState({\n            applications: temp,\n            sortdate: !t\n        })\n    }\n\n    sortbytitle(event)\n    {\n        var temp = this.state.applications;\n        var t = this.state.sortjobname;\n        temp.sort(function(a,b) {\n            a = a.job_id.job_title;\n            b = b.job_id.job_title;\n            return (1-2*t)*(a.localeCompare(b));\n        })\n        this.setState({\n            applications: temp,\n            sortjobname : !t\n        })\n    }\n\n    executeStuff()\n    {\n        axios({\n            method: \"GET\",\n            url: \"http://localhost:3000/applications/employees\",\n            data: null,\n            headers: {\n                'Content-type' : 'application/json'\n            }\n        })\n        .then((response) => {\n            console.log(response.data);\n            this.setState({\n                applications: response.data\n            })\n        })\n        .catch((err) => console.log(err))\n    }\n\n    handleSubmit(event)\n    {\n        var appl_id = this.state.appl_id;\n        var rat = this.state.rating;\n        if(rat === \"Select a Rating\")\n        {\n            alert(\"Please select a rating before submitting\");\n            return;\n        }\n        rat = {\"rating\":rat, \"application_id\":appl_id};\n        axios({\n            method:\"POST\",\n            url: \"http://localhost:3000/applicants/rateApplicant\",\n            data: rat,\n            headers: {\n                'Content-type' : 'application/json'\n            }\n        })\n        .then((response) => {\n            alert(\"Rated successfully\");\n            console.log(response);\n            this.setState({\n                rating: 'Select a Rating',\n                isModalOpen: false,\n                appl_id: ''\n            }, this.executeStuff())\n        })\n        .catch((error) => {\n            alert(JSON.stringify(error.response));\n        })\n    }\n\n    sortrating(event)\n    {\n        var temp = this.state.applications;\n        var t = this.state.sortrating;\n        temp.sort(function(a,b)\n        {\n            return(a.user_id.rating - b.user_id.rating)*(1-2*t);\n        })\n        this.setState({\n            applications: temp,\n            sortrating: !t\n        })\n        console.log(!t);\n    }\n\n    handleChange(event)\n    {\n        const target = event.target;\n        const value = target.value;\n        const name = target.name;\n        this.setState({\n            [name] : value\n        });\n    };\n\n    toggleModal(event)\n    {\n        if(this.state.isModalOpen === false)\n        {\n            var temp = event.target.id;\n            console.log(temp);\n            this.setState({\n                isModalOpen: true,\n                appl_id : temp\n            });\n        }\n        else\n        {\n            this.setState({\n                isModalOpen: false,\n                rating: 'Select a Rating',\n                appl_id: ''\n            });\n        }\n    }\n\n    componentDidMount()\n    {\n        this.executeStuff()\n    }\n\n    render()\n    {\n        var temp_appl = Array.from(this.state.applications);\n        temp_appl = temp_appl.map((application,i) => {\n            \n            return(\n                <Row>\n                    <Col>\n                    <Card body>\n                      <CardText>{application.job_id.job_title}</CardText>\n                      <CardText>{application.user_id.firstname} {application.user_id.lastname}</CardText>\n                      <CardText> {application.job_id.job_type}</CardText>\n                      <CardText>{application.job_id.salary}</CardText>\n                      <CardText>{application.status}</CardText>\n                      <CardText>{application.user_id.rating}</CardText>\n                      <Button id={application._id} onClick={this.toggleModal}>Rate</Button>\n                    </Card>\n                    </Col>\n                </Row>\n            )\n        });\n        return(\n            <div className=\"container\">\n                <NavbarRecruitment />\n                {temp_appl}\n                <Modal isOpen={this.state.isModalOpen} toggle={this.toggleModal} >\n                    <ModalHeader toggle={this.toggleModal}>Rate</ModalHeader>\n                    <ModalBody>\n                        {this.state.appl_id}\n                        <Form>\n                        <FormGroup row>\n                        <Label htmlFor=\"rating\" md={2}>Rating</Label>\n                        <Col md={10}>\n                            <Input type=\"select\" id=\"rating\" name=\"rating\" onChange={this.handleChange} value={this.state.rating} >\n                                <option selected disabled> Select a Rating</option> \n                                <option>1</option>\n                                <option>2</option>\n                                <option>3</option>\n                                <option>4</option>\n                                <option>5</option>\n                            </Input>\n                        </Col>\n                    </FormGroup>\n                    <FormGroup row>\n                        <Col md={{size:3, offset:3}}>\n                        <   Button  onClick={this.handleSubmit}>Submit</Button>\n                        </Col>\n                    </FormGroup>\n                        </Form>\n                    </ModalBody>\n                </Modal>\n                <FormGroup row>\n                <Col md={{size:6, offset:3}}> <Button row name=\"name\" id=\"name\" onClick={this.sortname}>Sort By Name</Button></Col>\n                </FormGroup>\n                <FormGroup row>\n                <Col md={{size:6, offset:3}}> <Button row name=\"sortdate\"  onClick={this.sortdate}>Sort By Date</Button></Col>\n                </FormGroup>\n                <FormGroup row>\n                <Col md={{size:6, offset:3}}> <Button row name=\"sortrating\" id=\"rating\" onClick={this.sortrating}>Sort By Rating</Button></Col>\n                </FormGroup>\n                <FormGroup row>\n                <Col md={{size:6, offset:3}}> <Button row name=\"\" id=\"\" onClick={this.sortbytitle}>Sort By Job Title</Button></Col>\n                </FormGroup>\n            </div>\n        )\n    }\n\n}","/home/pavani/Desktop/DASS/Job_Portal/frontend/src/components/PrivateRoute.js",[],"/home/pavani/Desktop/DASS/Job_Portal/frontend/src/components/LogOutComponent.js",["206","207","208","209","210","211","212","213","214"],"import React, {Component} from 'react';\nimport { Breadcrumb, BreadcrumbItem, Button, Form, FormGroup, Label, Input, Col, FormFeedback,Row } from 'reactstrap';\nimport NavbarUser from './NavbarUser';\nimport NavbarRecruitment from './NavbarRecruiter';\n\nexport default class Logout extends Component\n{\n    constructor(props)\n    {\n        super(props);\n        this.handleSubmit = this.handleSubmit.bind(this);\n        this.displayNavbar = this.displayNavbar.bind(this);\n    }\n\n    handleSubmit()\n    {\n        this.props.attemptLogout();\n        alert(\"Logout Successful\");\n        window.location.replace(\"/home\");\n    }\n\n    displayNavbar()\n    {\n        if(this.props.type === \"Applicant\")\n        {\n            return <NavbarUser />\n        }\n        else\n        {\n            return <NavbarRecruitment />\n        }\n    }\n\n    render()\n    {\n        const dis = this.displayNavbar();   \n        return(\n            <div className=\"container\">\n                {dis}\n                <p> Are you sure you want to logout :( ?</p>\n                <Button onClick={this.handleSubmit}>LogOut</Button>\n            </div>\n        )\n    }\n}","/home/pavani/Desktop/DASS/Job_Portal/frontend/src/components/NavbarUser.js",["215","216","217","218","219","220","221","222","223","224"],"import React, {Component} from 'react';\nimport { Nav, Navbar, NavbarBrand, NavbarToggler, Collapse, NavItem, Jumbotron, Button, Modal, ModalBody, ModalHeader, Form, FormGroup, Label, Input } from 'reactstrap';\nimport { NavLink } from 'react-router-dom';\n\nexport default class NavbarUser extends Component\n{\n    constructor(props)\n    {\n        super(props);\n        this.state = {\n            isNavOpen: false\n        }\n        this.toggleNav = this.toggleNav.bind(this);\n    }\n\n    toggleNav()\n    {\n        this.setState({\n            isNavOpen: !this.state.isNavOpen\n        })\n    }\n\n    render()\n    {\n        return(\n            <div>\n                <Navbar light expand=\"md\">\n                    <div className=\"container\">\n                        <NavbarToggler onClick={this.toggleNav} />\n                        <Collapse isOpen={this.state.isNavOpen} navbar>\n                            <Nav navbar>\n                                <NavItem>\n                                    <NavLink className=\"nav-link\" to='/applicant/dashboard'>Dashboard</NavLink>\n                                </NavItem>\n                                <NavItem>\n                                    <NavLink className=\"nav-link\" to='/applicant/applications'>My Applications</NavLink>\n                                </NavItem>\n                                <NavItem>\n                                    <NavLink className=\"nav-link\" to='/applicant/profile'>Profile</NavLink>\n                                </NavItem>\n                                <NavItem>\n                                    <NavLink className=\"nav-link\" to='/logout'>Logout</NavLink>\n                                </NavItem>\n                            </Nav>\n                        </Collapse>\n                    </div>\n                </Navbar>\n            </div>\n        )\n    }\n}","/home/pavani/Desktop/DASS/Job_Portal/frontend/src/components/NavbarRecruiter.js",["225","226","227","228","229","230","231","232","233","234"],"import React, {Component} from 'react';\nimport { Nav, Navbar, NavbarBrand, NavbarToggler, Collapse, NavItem, Jumbotron, Button, Modal, ModalBody, ModalHeader, Form, FormGroup, Label, Input } from 'reactstrap';\nimport { NavLink } from 'react-router-dom';\n\nexport default class NavbarRecruitment extends Component\n{\n    constructor(props)\n    {\n        super(props);\n        this.state = {\n            isNavOpen: false\n        }\n        this.toggleNav = this.toggleNav.bind(this);\n    }\n\n    toggleNav()\n    {\n        this.setState({\n            isNavOpen: !this.state.isNavOpen\n        })\n    }\n\n    render()\n    {\n        return(\n            <div>\n                <Navbar light expand=\"md\">\n                    <div className=\"container\">\n                    <NavbarToggler onClick={this.toggleNav} />\n                        <Collapse isOpen={this.state.isNavOpen} navbar>\n                            <Nav navbar>\n                                <NavItem>\n                                    <NavLink className=\"nav-link\" to='/recruiter/createJob'> Create a Job</NavLink>\n                                </NavItem>\n                                <NavItem>\n                                    <NavLink className=\"nav-link\" to='/recruiter/dashboard'>Dashboard</NavLink>\n                                </NavItem>\n                                <NavItem>\n                                    <NavLink className=\"nav-link\" to='/recruiter/employees'>My Employees</NavLink>\n                                </NavItem>\n                                <NavItem>\n                                    <NavLink className=\"nav-link\" to='/recruiter/profile'>Profile</NavLink>\n                                </NavItem>\n                                <NavItem>\n                                    <NavLink className=\"nav-link\" to='/logout'>Logout</NavLink>\n                                </NavItem>\n                            </Nav>\n                        </Collapse>\n                    </div>\n                </Navbar>\n            </div>\n        )\n    }\n}",["235","236"],"/home/pavani/Desktop/DASS/Job_Portal/frontend/src/components/LoggedOutNav.js",["237","238","239","240","241","242","243","244","245","246"],"import React, {Component} from 'react';\nimport { Nav, Navbar, NavbarBrand, NavbarToggler, Collapse, NavItem, Jumbotron, Button, Modal, ModalBody, ModalHeader, Form, FormGroup, Label, Input } from 'reactstrap';\nimport { NavLink } from 'react-router-dom';\n\nexport default class NavbarDefault extends Component\n{\n    constructor(props)\n    {\n        super(props);\n        this.state = {\n            isNavOpen: false\n        }\n        this.toggleNav = this.toggleNav.bind(this);\n    }\n\n    toggleNav()\n    {\n        this.setState({\n            isNavOpen: !this.state.isNavOpen\n        })\n    }\n    render()\n    {\n        return(\n            <Navbar light expand=\"md\">\n                <div className=\"container\">\n                    <NavbarToggler onClick={this.toggleNav} />\n                    <Collapse isOpen={this.state.isNavOpen} navbar>\n                        <Nav navbar>\n                            <NavItem>\n                                <NavLink className=\"nav-link\" to='/register'>Sign Up</NavLink>\n                            </NavItem>\n                            <NavItem>\n                                <NavLink className=\"nav-link\" to='/login'>Sign in</NavLink>\n                            </NavItem>\n                            <NavItem>\n                                <NavLink className=\"nav-link\" to='/home'>Home</NavLink>\n                            </NavItem>\n                        </Nav>\n                    </Collapse>\n                </div>\n            </Navbar>\n        )\n    }\n}","/home/pavani/Desktop/DASS/Job_Portal/frontend/src/components/HomeComponent.js",["247","248","249","250","251","252","253","254","255","256","257","258","259","260","261"],"import React, {Component} from 'react';\nimport { Nav, Navbar, NavbarBrand, NavbarToggler, Collapse, NavItem, Jumbotron, Button, Modal, ModalBody, ModalHeader, Form, FormGroup, Label, Input } from 'reactstrap';\nimport { NavLink, Link } from 'react-router-dom';\nimport NavbarDefault from './LoggedOutNav';\n\nexport default class Home extends Component\n{\n    constructor(props)\n    {\n        super(props);\n        this.state = {\n            isNavOpen: false\n        }\n        this.toggleNav = this.toggleNav.bind(this);\n    }\n\n    toggleNav()\n    {\n        this.setState({\n            isNavOpen: !this.state.isNavOpen\n        })\n    }\n    render()\n    {\n        return(\n            <div>\n                <NavbarDefault />\n                <div>\n                    <p>New User? Head up to signup and register yourself</p>\n                    <Link to={`/register`}><Button>Go to Signup</Button></Link>\n                </div>\n                <div>\n                    <p>Already a customer? Login so that we can recognise you</p>\n                    <Link to={`/login`}><Button>Go to Login</Button></Link>\n                </div>\n            </div>\n        )\n    }\n}",{"ruleId":"262","replacedBy":"263"},{"ruleId":"264","replacedBy":"265"},{"ruleId":"266","severity":1,"message":"267","line":2,"column":34,"nodeType":"268","messageId":"269","endLine":2,"endColumn":44},{"ruleId":"266","severity":1,"message":"270","line":2,"column":10,"nodeType":"268","messageId":"269","endLine":2,"endColumn":20},{"ruleId":"266","severity":1,"message":"271","line":2,"column":22,"nodeType":"268","messageId":"269","endLine":2,"endColumn":36},{"ruleId":"266","severity":1,"message":"272","line":2,"column":95,"nodeType":"268","messageId":"269","endLine":2,"endColumn":98},{"ruleId":"266","severity":1,"message":"270","line":2,"column":10,"nodeType":"268","messageId":"269","endLine":2,"endColumn":20},{"ruleId":"266","severity":1,"message":"271","line":2,"column":22,"nodeType":"268","messageId":"269","endLine":2,"endColumn":36},{"ruleId":"266","severity":1,"message":"273","line":2,"column":82,"nodeType":"268","messageId":"269","endLine":2,"endColumn":94},{"ruleId":"266","severity":1,"message":"272","line":2,"column":95,"nodeType":"268","messageId":"269","endLine":2,"endColumn":98},{"ruleId":"266","severity":1,"message":"274","line":2,"column":9,"nodeType":"268","messageId":"269","endLine":2,"endColumn":15},{"ruleId":"266","severity":1,"message":"275","line":2,"column":17,"nodeType":"268","messageId":"269","endLine":2,"endColumn":22},{"ruleId":"266","severity":1,"message":"276","line":2,"column":24,"nodeType":"268","messageId":"269","endLine":2,"endColumn":32},{"ruleId":"266","severity":1,"message":"267","line":2,"column":34,"nodeType":"268","messageId":"269","endLine":2,"endColumn":44},{"ruleId":"266","severity":1,"message":"277","line":2,"column":46,"nodeType":"268","messageId":"269","endLine":2,"endColumn":59},{"ruleId":"266","severity":1,"message":"270","line":3,"column":10,"nodeType":"268","messageId":"269","endLine":3,"endColumn":20},{"ruleId":"266","severity":1,"message":"271","line":3,"column":22,"nodeType":"268","messageId":"269","endLine":3,"endColumn":36},{"ruleId":"266","severity":1,"message":"272","line":3,"column":95,"nodeType":"268","messageId":"269","endLine":3,"endColumn":98},{"ruleId":"266","severity":1,"message":"274","line":2,"column":9,"nodeType":"268","messageId":"269","endLine":2,"endColumn":15},{"ruleId":"266","severity":1,"message":"275","line":2,"column":17,"nodeType":"268","messageId":"269","endLine":2,"endColumn":22},{"ruleId":"266","severity":1,"message":"276","line":2,"column":24,"nodeType":"268","messageId":"269","endLine":2,"endColumn":32},{"ruleId":"266","severity":1,"message":"267","line":2,"column":34,"nodeType":"268","messageId":"269","endLine":2,"endColumn":44},{"ruleId":"266","severity":1,"message":"277","line":2,"column":46,"nodeType":"268","messageId":"269","endLine":2,"endColumn":59},{"ruleId":"266","severity":1,"message":"270","line":4,"column":10,"nodeType":"268","messageId":"269","endLine":4,"endColumn":20},{"ruleId":"266","severity":1,"message":"271","line":4,"column":22,"nodeType":"268","messageId":"269","endLine":4,"endColumn":36},{"ruleId":"266","severity":1,"message":"273","line":4,"column":82,"nodeType":"268","messageId":"269","endLine":4,"endColumn":94},{"ruleId":"266","severity":1,"message":"278","line":4,"column":117,"nodeType":"268","messageId":"269","endLine":4,"endColumn":129},{"ruleId":"266","severity":1,"message":"279","line":4,"column":172,"nodeType":"268","messageId":"269","endLine":4,"endColumn":177},{"ruleId":"266","severity":1,"message":"274","line":2,"column":9,"nodeType":"268","messageId":"269","endLine":2,"endColumn":15},{"ruleId":"266","severity":1,"message":"275","line":2,"column":17,"nodeType":"268","messageId":"269","endLine":2,"endColumn":22},{"ruleId":"266","severity":1,"message":"276","line":2,"column":24,"nodeType":"268","messageId":"269","endLine":2,"endColumn":32},{"ruleId":"266","severity":1,"message":"267","line":2,"column":34,"nodeType":"268","messageId":"269","endLine":2,"endColumn":44},{"ruleId":"266","severity":1,"message":"277","line":2,"column":46,"nodeType":"268","messageId":"269","endLine":2,"endColumn":59},{"ruleId":"266","severity":1,"message":"270","line":4,"column":10,"nodeType":"268","messageId":"269","endLine":4,"endColumn":20},{"ruleId":"266","severity":1,"message":"271","line":4,"column":22,"nodeType":"268","messageId":"269","endLine":4,"endColumn":36},{"ruleId":"266","severity":1,"message":"273","line":4,"column":82,"nodeType":"268","messageId":"269","endLine":4,"endColumn":94},{"ruleId":"266","severity":1,"message":"278","line":4,"column":117,"nodeType":"268","messageId":"269","endLine":4,"endColumn":129},{"ruleId":"266","severity":1,"message":"280","line":4,"column":172,"nodeType":"268","messageId":"269","endLine":4,"endColumn":182},{"ruleId":"266","severity":1,"message":"274","line":2,"column":9,"nodeType":"268","messageId":"269","endLine":2,"endColumn":15},{"ruleId":"266","severity":1,"message":"275","line":2,"column":17,"nodeType":"268","messageId":"269","endLine":2,"endColumn":22},{"ruleId":"266","severity":1,"message":"276","line":2,"column":24,"nodeType":"268","messageId":"269","endLine":2,"endColumn":32},{"ruleId":"266","severity":1,"message":"267","line":2,"column":34,"nodeType":"268","messageId":"269","endLine":2,"endColumn":44},{"ruleId":"266","severity":1,"message":"277","line":2,"column":46,"nodeType":"268","messageId":"269","endLine":2,"endColumn":59},{"ruleId":"266","severity":1,"message":"270","line":4,"column":10,"nodeType":"268","messageId":"269","endLine":4,"endColumn":20},{"ruleId":"266","severity":1,"message":"271","line":4,"column":22,"nodeType":"268","messageId":"269","endLine":4,"endColumn":36},{"ruleId":"266","severity":1,"message":"272","line":4,"column":95,"nodeType":"268","messageId":"269","endLine":4,"endColumn":98},{"ruleId":"266","severity":1,"message":"281","line":4,"column":100,"nodeType":"268","messageId":"269","endLine":4,"endColumn":104},{"ruleId":"266","severity":1,"message":"282","line":4,"column":106,"nodeType":"268","messageId":"269","endLine":4,"endColumn":115},{"ruleId":"266","severity":1,"message":"278","line":4,"column":117,"nodeType":"268","messageId":"269","endLine":4,"endColumn":129},{"ruleId":"266","severity":1,"message":"283","line":4,"column":131,"nodeType":"268","messageId":"269","endLine":4,"endColumn":139},{"ruleId":"266","severity":1,"message":"284","line":4,"column":141,"nodeType":"268","messageId":"269","endLine":4,"endColumn":146},{"ruleId":"266","severity":1,"message":"285","line":4,"column":148,"nodeType":"268","messageId":"269","endLine":4,"endColumn":159},{"ruleId":"266","severity":1,"message":"286","line":4,"column":161,"nodeType":"268","messageId":"269","endLine":4,"endColumn":170},{"ruleId":"266","severity":1,"message":"280","line":4,"column":172,"nodeType":"268","messageId":"269","endLine":4,"endColumn":182},{"ruleId":"266","severity":1,"message":"274","line":2,"column":9,"nodeType":"268","messageId":"269","endLine":2,"endColumn":15},{"ruleId":"266","severity":1,"message":"275","line":2,"column":17,"nodeType":"268","messageId":"269","endLine":2,"endColumn":22},{"ruleId":"266","severity":1,"message":"276","line":2,"column":24,"nodeType":"268","messageId":"269","endLine":2,"endColumn":32},{"ruleId":"266","severity":1,"message":"267","line":2,"column":34,"nodeType":"268","messageId":"269","endLine":2,"endColumn":44},{"ruleId":"266","severity":1,"message":"277","line":2,"column":46,"nodeType":"268","messageId":"269","endLine":2,"endColumn":59},{"ruleId":"266","severity":1,"message":"270","line":4,"column":10,"nodeType":"268","messageId":"269","endLine":4,"endColumn":20},{"ruleId":"266","severity":1,"message":"271","line":4,"column":22,"nodeType":"268","messageId":"269","endLine":4,"endColumn":36},{"ruleId":"266","severity":1,"message":"272","line":4,"column":95,"nodeType":"268","messageId":"269","endLine":4,"endColumn":98},{"ruleId":"266","severity":1,"message":"281","line":4,"column":100,"nodeType":"268","messageId":"269","endLine":4,"endColumn":104},{"ruleId":"266","severity":1,"message":"282","line":4,"column":106,"nodeType":"268","messageId":"269","endLine":4,"endColumn":115},{"ruleId":"266","severity":1,"message":"278","line":4,"column":117,"nodeType":"268","messageId":"269","endLine":4,"endColumn":129},{"ruleId":"266","severity":1,"message":"283","line":4,"column":131,"nodeType":"268","messageId":"269","endLine":4,"endColumn":139},{"ruleId":"266","severity":1,"message":"284","line":4,"column":141,"nodeType":"268","messageId":"269","endLine":4,"endColumn":146},{"ruleId":"266","severity":1,"message":"285","line":4,"column":148,"nodeType":"268","messageId":"269","endLine":4,"endColumn":159},{"ruleId":"266","severity":1,"message":"286","line":4,"column":161,"nodeType":"268","messageId":"269","endLine":4,"endColumn":170},{"ruleId":"266","severity":1,"message":"274","line":2,"column":9,"nodeType":"268","messageId":"269","endLine":2,"endColumn":15},{"ruleId":"266","severity":1,"message":"275","line":2,"column":17,"nodeType":"268","messageId":"269","endLine":2,"endColumn":22},{"ruleId":"266","severity":1,"message":"276","line":2,"column":24,"nodeType":"268","messageId":"269","endLine":2,"endColumn":32},{"ruleId":"266","severity":1,"message":"267","line":2,"column":34,"nodeType":"268","messageId":"269","endLine":2,"endColumn":44},{"ruleId":"266","severity":1,"message":"277","line":2,"column":46,"nodeType":"268","messageId":"269","endLine":2,"endColumn":59},{"ruleId":"266","severity":1,"message":"270","line":4,"column":10,"nodeType":"268","messageId":"269","endLine":4,"endColumn":20},{"ruleId":"266","severity":1,"message":"271","line":4,"column":22,"nodeType":"268","messageId":"269","endLine":4,"endColumn":36},{"ruleId":"266","severity":1,"message":"273","line":4,"column":82,"nodeType":"268","messageId":"269","endLine":4,"endColumn":94},{"ruleId":"266","severity":1,"message":"278","line":4,"column":117,"nodeType":"268","messageId":"269","endLine":4,"endColumn":129},{"ruleId":"266","severity":1,"message":"274","line":2,"column":9,"nodeType":"268","messageId":"269","endLine":2,"endColumn":15},{"ruleId":"266","severity":1,"message":"275","line":2,"column":17,"nodeType":"268","messageId":"269","endLine":2,"endColumn":22},{"ruleId":"266","severity":1,"message":"276","line":2,"column":24,"nodeType":"268","messageId":"269","endLine":2,"endColumn":32},{"ruleId":"266","severity":1,"message":"267","line":2,"column":34,"nodeType":"268","messageId":"269","endLine":2,"endColumn":44},{"ruleId":"266","severity":1,"message":"277","line":2,"column":46,"nodeType":"268","messageId":"269","endLine":2,"endColumn":59},{"ruleId":"266","severity":1,"message":"270","line":4,"column":10,"nodeType":"268","messageId":"269","endLine":4,"endColumn":20},{"ruleId":"266","severity":1,"message":"271","line":4,"column":22,"nodeType":"268","messageId":"269","endLine":4,"endColumn":36},{"ruleId":"266","severity":1,"message":"287","line":4,"column":46,"nodeType":"268","messageId":"269","endLine":4,"endColumn":50},{"ruleId":"266","severity":1,"message":"288","line":4,"column":63,"nodeType":"268","messageId":"269","endLine":4,"endColumn":68},{"ruleId":"266","severity":1,"message":"289","line":4,"column":70,"nodeType":"268","messageId":"269","endLine":4,"endColumn":75},{"ruleId":"266","severity":1,"message":"273","line":4,"column":82,"nodeType":"268","messageId":"269","endLine":4,"endColumn":94},{"ruleId":"266","severity":1,"message":"282","line":4,"column":106,"nodeType":"268","messageId":"269","endLine":4,"endColumn":115},{"ruleId":"266","severity":1,"message":"278","line":4,"column":117,"nodeType":"268","messageId":"269","endLine":4,"endColumn":129},{"ruleId":"266","severity":1,"message":"284","line":4,"column":141,"nodeType":"268","messageId":"269","endLine":4,"endColumn":146},{"ruleId":"266","severity":1,"message":"285","line":4,"column":148,"nodeType":"268","messageId":"269","endLine":4,"endColumn":159},{"ruleId":"266","severity":1,"message":"286","line":4,"column":161,"nodeType":"268","messageId":"269","endLine":4,"endColumn":170},{"ruleId":"290","severity":1,"message":"291","line":166,"column":21,"nodeType":"268","messageId":"292","endLine":166,"endColumn":28},{"ruleId":"266","severity":1,"message":"274","line":2,"column":9,"nodeType":"268","messageId":"269","endLine":2,"endColumn":15},{"ruleId":"266","severity":1,"message":"275","line":2,"column":17,"nodeType":"268","messageId":"269","endLine":2,"endColumn":22},{"ruleId":"266","severity":1,"message":"276","line":2,"column":24,"nodeType":"268","messageId":"269","endLine":2,"endColumn":32},{"ruleId":"266","severity":1,"message":"267","line":2,"column":34,"nodeType":"268","messageId":"269","endLine":2,"endColumn":44},{"ruleId":"266","severity":1,"message":"277","line":2,"column":46,"nodeType":"268","messageId":"269","endLine":2,"endColumn":59},{"ruleId":"266","severity":1,"message":"270","line":4,"column":10,"nodeType":"268","messageId":"269","endLine":4,"endColumn":20},{"ruleId":"266","severity":1,"message":"271","line":4,"column":22,"nodeType":"268","messageId":"269","endLine":4,"endColumn":36},{"ruleId":"266","severity":1,"message":"273","line":4,"column":82,"nodeType":"268","messageId":"269","endLine":4,"endColumn":94},{"ruleId":"266","severity":1,"message":"282","line":4,"column":106,"nodeType":"268","messageId":"269","endLine":4,"endColumn":115},{"ruleId":"266","severity":1,"message":"278","line":4,"column":117,"nodeType":"268","messageId":"269","endLine":4,"endColumn":129},{"ruleId":"266","severity":1,"message":"280","line":4,"column":172,"nodeType":"268","messageId":"269","endLine":4,"endColumn":182},{"ruleId":"266","severity":1,"message":"270","line":2,"column":10,"nodeType":"268","messageId":"269","endLine":2,"endColumn":20},{"ruleId":"266","severity":1,"message":"271","line":2,"column":22,"nodeType":"268","messageId":"269","endLine":2,"endColumn":36},{"ruleId":"266","severity":1,"message":"287","line":2,"column":46,"nodeType":"268","messageId":"269","endLine":2,"endColumn":50},{"ruleId":"266","severity":1,"message":"293","line":2,"column":52,"nodeType":"268","messageId":"269","endLine":2,"endColumn":61},{"ruleId":"266","severity":1,"message":"288","line":2,"column":63,"nodeType":"268","messageId":"269","endLine":2,"endColumn":68},{"ruleId":"266","severity":1,"message":"289","line":2,"column":70,"nodeType":"268","messageId":"269","endLine":2,"endColumn":75},{"ruleId":"266","severity":1,"message":"294","line":2,"column":77,"nodeType":"268","messageId":"269","endLine":2,"endColumn":80},{"ruleId":"266","severity":1,"message":"273","line":2,"column":82,"nodeType":"268","messageId":"269","endLine":2,"endColumn":94},{"ruleId":"266","severity":1,"message":"272","line":2,"column":95,"nodeType":"268","messageId":"269","endLine":2,"endColumn":98},{"ruleId":"266","severity":1,"message":"295","line":2,"column":23,"nodeType":"268","messageId":"269","endLine":2,"endColumn":34},{"ruleId":"266","severity":1,"message":"296","line":2,"column":70,"nodeType":"268","messageId":"269","endLine":2,"endColumn":79},{"ruleId":"266","severity":1,"message":"297","line":2,"column":81,"nodeType":"268","messageId":"269","endLine":2,"endColumn":87},{"ruleId":"266","severity":1,"message":"284","line":2,"column":89,"nodeType":"268","messageId":"269","endLine":2,"endColumn":94},{"ruleId":"266","severity":1,"message":"286","line":2,"column":96,"nodeType":"268","messageId":"269","endLine":2,"endColumn":105},{"ruleId":"266","severity":1,"message":"285","line":2,"column":107,"nodeType":"268","messageId":"269","endLine":2,"endColumn":118},{"ruleId":"266","severity":1,"message":"287","line":2,"column":120,"nodeType":"268","messageId":"269","endLine":2,"endColumn":124},{"ruleId":"266","severity":1,"message":"293","line":2,"column":126,"nodeType":"268","messageId":"269","endLine":2,"endColumn":135},{"ruleId":"266","severity":1,"message":"288","line":2,"column":137,"nodeType":"268","messageId":"269","endLine":2,"endColumn":142},{"ruleId":"266","severity":1,"message":"289","line":2,"column":144,"nodeType":"268","messageId":"269","endLine":2,"endColumn":149},{"ruleId":"266","severity":1,"message":"295","line":2,"column":23,"nodeType":"268","messageId":"269","endLine":2,"endColumn":34},{"ruleId":"266","severity":1,"message":"296","line":2,"column":70,"nodeType":"268","messageId":"269","endLine":2,"endColumn":79},{"ruleId":"266","severity":1,"message":"297","line":2,"column":81,"nodeType":"268","messageId":"269","endLine":2,"endColumn":87},{"ruleId":"266","severity":1,"message":"284","line":2,"column":89,"nodeType":"268","messageId":"269","endLine":2,"endColumn":94},{"ruleId":"266","severity":1,"message":"286","line":2,"column":96,"nodeType":"268","messageId":"269","endLine":2,"endColumn":105},{"ruleId":"266","severity":1,"message":"285","line":2,"column":107,"nodeType":"268","messageId":"269","endLine":2,"endColumn":118},{"ruleId":"266","severity":1,"message":"287","line":2,"column":120,"nodeType":"268","messageId":"269","endLine":2,"endColumn":124},{"ruleId":"266","severity":1,"message":"293","line":2,"column":126,"nodeType":"268","messageId":"269","endLine":2,"endColumn":135},{"ruleId":"266","severity":1,"message":"288","line":2,"column":137,"nodeType":"268","messageId":"269","endLine":2,"endColumn":142},{"ruleId":"266","severity":1,"message":"289","line":2,"column":144,"nodeType":"268","messageId":"269","endLine":2,"endColumn":149},{"ruleId":"262","replacedBy":"298"},{"ruleId":"264","replacedBy":"299"},{"ruleId":"266","severity":1,"message":"295","line":2,"column":23,"nodeType":"268","messageId":"269","endLine":2,"endColumn":34},{"ruleId":"266","severity":1,"message":"296","line":2,"column":70,"nodeType":"268","messageId":"269","endLine":2,"endColumn":79},{"ruleId":"266","severity":1,"message":"297","line":2,"column":81,"nodeType":"268","messageId":"269","endLine":2,"endColumn":87},{"ruleId":"266","severity":1,"message":"284","line":2,"column":89,"nodeType":"268","messageId":"269","endLine":2,"endColumn":94},{"ruleId":"266","severity":1,"message":"286","line":2,"column":96,"nodeType":"268","messageId":"269","endLine":2,"endColumn":105},{"ruleId":"266","severity":1,"message":"285","line":2,"column":107,"nodeType":"268","messageId":"269","endLine":2,"endColumn":118},{"ruleId":"266","severity":1,"message":"287","line":2,"column":120,"nodeType":"268","messageId":"269","endLine":2,"endColumn":124},{"ruleId":"266","severity":1,"message":"293","line":2,"column":126,"nodeType":"268","messageId":"269","endLine":2,"endColumn":135},{"ruleId":"266","severity":1,"message":"288","line":2,"column":137,"nodeType":"268","messageId":"269","endLine":2,"endColumn":142},{"ruleId":"266","severity":1,"message":"289","line":2,"column":144,"nodeType":"268","messageId":"269","endLine":2,"endColumn":149},{"ruleId":"266","severity":1,"message":"300","line":2,"column":10,"nodeType":"268","messageId":"269","endLine":2,"endColumn":13},{"ruleId":"266","severity":1,"message":"301","line":2,"column":15,"nodeType":"268","messageId":"269","endLine":2,"endColumn":21},{"ruleId":"266","severity":1,"message":"295","line":2,"column":23,"nodeType":"268","messageId":"269","endLine":2,"endColumn":34},{"ruleId":"266","severity":1,"message":"302","line":2,"column":36,"nodeType":"268","messageId":"269","endLine":2,"endColumn":49},{"ruleId":"266","severity":1,"message":"303","line":2,"column":51,"nodeType":"268","messageId":"269","endLine":2,"endColumn":59},{"ruleId":"266","severity":1,"message":"304","line":2,"column":61,"nodeType":"268","messageId":"269","endLine":2,"endColumn":68},{"ruleId":"266","severity":1,"message":"296","line":2,"column":70,"nodeType":"268","messageId":"269","endLine":2,"endColumn":79},{"ruleId":"266","severity":1,"message":"284","line":2,"column":89,"nodeType":"268","messageId":"269","endLine":2,"endColumn":94},{"ruleId":"266","severity":1,"message":"286","line":2,"column":96,"nodeType":"268","messageId":"269","endLine":2,"endColumn":105},{"ruleId":"266","severity":1,"message":"285","line":2,"column":107,"nodeType":"268","messageId":"269","endLine":2,"endColumn":118},{"ruleId":"266","severity":1,"message":"287","line":2,"column":120,"nodeType":"268","messageId":"269","endLine":2,"endColumn":124},{"ruleId":"266","severity":1,"message":"293","line":2,"column":126,"nodeType":"268","messageId":"269","endLine":2,"endColumn":135},{"ruleId":"266","severity":1,"message":"288","line":2,"column":137,"nodeType":"268","messageId":"269","endLine":2,"endColumn":142},{"ruleId":"266","severity":1,"message":"289","line":2,"column":144,"nodeType":"268","messageId":"269","endLine":2,"endColumn":149},{"ruleId":"266","severity":1,"message":"305","line":3,"column":10,"nodeType":"268","messageId":"269","endLine":3,"endColumn":17},"no-native-reassign",["306"],"no-negated-in-lhs",["307"],"no-unused-vars","'withRouter' is defined but never used.","Identifier","unusedVar","'Breadcrumb' is defined but never used.","'BreadcrumbItem' is defined but never used.","'Row' is defined but never used.","'FormFeedback' is defined but never used.","'Switch' is defined but never used.","'Route' is defined but never used.","'Redirect' is defined but never used.","'BrowserRouter' is defined but never used.","'CardSubtitle' is defined but never used.","'Table' is defined but never used.","'NavbarText' is defined but never used.","'Card' is defined but never used.","'CardTitle' is defined but never used.","'CardText' is defined but never used.","'Modal' is defined but never used.","'ModalHeader' is defined but never used.","'ModalBody' is defined but never used.","'Form' is defined but never used.","'Label' is defined but never used.","'Input' is defined but never used.","no-redeclare","'button3' is already defined.","redeclared","'FormGroup' is defined but never used.","'Col' is defined but never used.","'NavbarBrand' is defined but never used.","'Jumbotron' is defined but never used.","'Button' is defined but never used.",["306"],["307"],"'Nav' is defined but never used.","'Navbar' is defined but never used.","'NavbarToggler' is defined but never used.","'Collapse' is defined but never used.","'NavItem' is defined but never used.","'NavLink' is defined but never used.","no-global-assign","no-unsafe-negation"]